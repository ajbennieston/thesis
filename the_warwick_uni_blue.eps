%!PS-Adobe-3.1 EPSF-3.0
%%Title: UW-blue1.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0
%AI9_PrintingDataBegin
%%For: JHR - Mathematics Institute
%%CreationDate: 03/04/2003
%%BoundingBox: 0 0 156 45
%%HiResBoundingBox: 0 0 155.7950 45.1436
%%CropBox: 0 0 155.7950 45.1436
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE 286 CVC)
%%CMYKCustomColor: 1 0.6 0 0.06 (PANTONE 286 CVC)
%%RGBCustomColor: 
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/exec_file
	statusdict /currentfilenameextend known{
		{
			0 () /SubFileDecode filter cvx exec
		}
	}{
		
		{cvx exec}
	}ifelse
def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		currentdict /lw_initializepage known not
			{
			/lw_initializepage /initializepage load def
			/initializepage
				{
				lw_initializepage
				/initializepage {} def
				}def
			}if
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: UW-blue.eps 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -45.1436 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 45.1436 li
155.795 45.1436 li
155.795 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
3.88282 5.09376 mo
3.88282 6.11231 3.88282 6.95215 3.93653 7.39551 cv
3.96778 7.70508 4.03028 7.93848 4.34864 7.98047 cv
4.49805 8.00098 4.73145 8.02247 4.8252 8.02247 cv
4.89161 8.02247 4.91309 8.05372 4.91309 8.08497 cv
4.91309 8.1377 4.8584 8.16895 4.74219 8.16895 cv
4.15918 8.16895 3.49024 8.1377 3.4375 8.1377 cv
3.38379 8.1377 2.71583 8.16895 2.39551 8.16895 cv
2.28028 8.16895 2.22754 8.14844 2.22754 8.08497 cv
2.22754 8.05372 2.24903 8.02247 2.31153 8.02247 cv
2.40723 8.02247 2.53516 8.00098 2.62989 7.98047 cv
2.84278 7.93848 2.89551 7.70508 2.93848 7.39551 cv
2.99122 6.95215 2.99122 6.11231 2.99122 5.09376 cv
2.99122 0.606446 li
1.4209 0.626954 li
0.762696 0.637696 0.50879 0.710938 0.338868 0.965821 cv
0.222657 1.14747 0.188477 1.21973 0.157227 1.29493 cv
0.125977 1.37989 0.0947266 1.40137 0.0517579 1.40137 cv
0.0205079 1.40137 0 1.37012 0 1.30567 cv
0 1.19922 0.211915 0.286133 0.233399 0.202149 cv
0.254883 0.138672 0.295899 0 0.338868 0 cv
0.41211 0 0.518555 0.106446 0.805665 0.12793 cv
1.11231 0.15918 1.51661 0.180665 1.64258 0.180665 cv
5.62403 0.180665 li
6.30079 0.180665 6.58887 0.0751954 6.67286 0.0751954 cv
6.72559 0.0751954 6.72559 0.138672 6.72559 0.202149 cv
6.72559 0.519532 6.69434 1.25098 6.69434 1.37012 cv
6.69434 1.46387 6.66309 1.50684 6.6211 1.50684 cv
6.56739 1.50684 6.54493 1.47461 6.53418 1.32715 cv
6.52442 1.20997 li
6.48145 0.891602 6.23731 0.647461 5.21973 0.626954 cv
3.88282 0.606446 li
3.88282 5.09376 li
false sop
/0 
<<
/Name (PANTONE 286 CVC)
/CSA /1 
/TintMethod /Subtractive
/TintProc null
/MappedCSA null
/NComponents 4 
/ColorLookup [ 
[ 0 0 0 0 ] [ 0.00392157 0.00235295 0 0.000235295 ]
[ 0.00784314 0.00470589 0 0.000470589 ] [ 0.0117648 0.00705883 0 0.000705883 ]
[ 0.0156863 0.00941177 0 0.000941177 ] [ 0.0196079 0.0117648 0 0.00117648 ]
[ 0.0235295 0.0141177 0 0.00141177 ] [ 0.027451 0.0164706 0 0.00164706 ]
[ 0.0313726 0.0188236 0 0.00188236 ] [ 0.0352942 0.0211765 0 0.00211765 ]
[ 0.0392157 0.0235295 0 0.00235295 ] [ 0.0431373 0.0258824 0 0.00258824 ]
[ 0.0470589 0.0282353 0 0.00282353 ] [ 0.0509804 0.0305883 0 0.00305883 ]
[ 0.054902 0.0329412 0 0.00329412 ] [ 0.0588236 0.0352942 0 0.00352942 ]
[ 0.0627451 0.0376471 0 0.00376471 ] [ 0.0666667 0.04 0 0.004 ]
[ 0.0705883 0.042353 0 0.0042353 ] [ 0.0745098 0.0447059 0 0.00447059 ]
[ 0.0784314 0.0470589 0 0.00470589 ] [ 0.082353 0.0494118 0 0.00494118 ]
[ 0.0862746 0.0517648 0 0.00517648 ] [ 0.0901961 0.0541177 0 0.00541177 ]
[ 0.0941177 0.0564706 0 0.00564706 ] [ 0.0980393 0.0588236 0 0.00588236 ]
[ 0.101961 0.0611765 0 0.00611765 ] [ 0.105883 0.0635295 0 0.00635295 ]
[ 0.109804 0.0658824 0 0.00658824 ] [ 0.113726 0.0682353 0 0.00682353 ]
[ 0.117648 0.0705883 0 0.00705883 ] [ 0.121569 0.0729412 0 0.00729412 ]
[ 0.125491 0.0752942 0 0.00752942 ] [ 0.129412 0.0776471 0 0.00776471 ]
[ 0.133334 0.08 0 0.008 ] [ 0.137255 0.082353 0 0.0082353 ]
[ 0.141177 0.0847059 0 0.00847059 ] [ 0.145099 0.0870589 0 0.00870589 ]
[ 0.14902 0.0894118 0 0.00894118 ] [ 0.152942 0.0917648 0 0.00917647 ]
[ 0.156863 0.0941177 0 0.00941177 ] [ 0.160785 0.0964706 0 0.00964706 ]
[ 0.164706 0.0988236 0 0.00988236 ] [ 0.168628 0.101177 0 0.0101177 ]
[ 0.17255 0.10353 0 0.010353 ] [ 0.176471 0.105883 0 0.0105883 ]
[ 0.180393 0.108236 0 0.0108236 ] [ 0.184314 0.110589 0 0.0110589 ]
[ 0.188236 0.112942 0 0.0112942 ] [ 0.192157 0.115295 0 0.0115295 ]
[ 0.196079 0.117648 0 0.0117648 ] [ 0.2 0.12 0 0.012 ]
[ 0.203922 0.122353 0 0.0122353 ] [ 0.207844 0.124706 0 0.0124706 ]
[ 0.211765 0.127059 0 0.0127059 ] [ 0.215687 0.129412 0 0.0129412 ]
[ 0.219608 0.131765 0 0.0131765 ] [ 0.22353 0.134118 0 0.0134118 ]
[ 0.227451 0.136471 0 0.0136471 ] [ 0.231373 0.138824 0 0.0138824 ]
[ 0.235295 0.141177 0 0.0141177 ] [ 0.239216 0.14353 0 0.014353 ]
[ 0.243138 0.145883 0 0.0145883 ] [ 0.247059 0.148236 0 0.0148236 ]
[ 0.250981 0.150589 0 0.0150589 ] [ 0.254902 0.152942 0 0.0152942 ]
[ 0.258824 0.155295 0 0.0155295 ] [ 0.262746 0.157648 0 0.0157648 ]
[ 0.266667 0.16 0 0.016 ] [ 0.270589 0.162353 0 0.0162353 ]
[ 0.27451 0.164706 0 0.0164706 ] [ 0.278432 0.167059 0 0.0167059 ]
[ 0.282353 0.169412 0 0.0169412 ] [ 0.286275 0.171765 0 0.0171765 ]
[ 0.290197 0.174118 0 0.0174118 ] [ 0.294118 0.176471 0 0.0176471 ]
[ 0.29804 0.178824 0 0.0178824 ] [ 0.301961 0.181177 0 0.0181177 ]
[ 0.305883 0.18353 0 0.018353 ] [ 0.309804 0.185883 0 0.0185883 ]
[ 0.313726 0.188236 0 0.0188236 ] [ 0.317648 0.190589 0 0.0190589 ]
[ 0.321569 0.192942 0 0.0192942 ] [ 0.325491 0.195295 0 0.0195295 ]
[ 0.329412 0.197648 0 0.0197648 ] [ 0.333334 0.2 0 0.02 ]
[ 0.337255 0.202353 0 0.0202353 ] [ 0.341177 0.204706 0 0.0204706 ]
[ 0.345099 0.207059 0 0.0207059 ] [ 0.34902 0.209412 0 0.0209412 ]
[ 0.352942 0.211765 0 0.0211765 ] [ 0.356863 0.214118 0 0.0214118 ]
[ 0.360785 0.216471 0 0.0216471 ] [ 0.364706 0.218824 0 0.0218824 ]
[ 0.368628 0.221177 0 0.0221177 ] [ 0.37255 0.22353 0 0.022353 ]
[ 0.376471 0.225883 0 0.0225883 ] [ 0.380393 0.228236 0 0.0228236 ]
[ 0.384314 0.230589 0 0.0230589 ] [ 0.388236 0.232942 0 0.0232942 ]
[ 0.392157 0.235295 0 0.0235295 ] [ 0.396079 0.237648 0 0.0237648 ]
[ 0.4 0.24 0 0.024 ] [ 0.403922 0.242353 0 0.0242353 ]
[ 0.407844 0.244706 0 0.0244706 ] [ 0.411765 0.247059 0 0.0247059 ]
[ 0.415687 0.249412 0 0.0249412 ] [ 0.419608 0.251765 0 0.0251765 ]
[ 0.42353 0.254118 0 0.0254118 ] [ 0.427451 0.256471 0 0.0256471 ]
[ 0.431373 0.258824 0 0.0258824 ] [ 0.435295 0.261177 0 0.0261177 ]
[ 0.439216 0.26353 0 0.026353 ] [ 0.443138 0.265883 0 0.0265883 ]
[ 0.447059 0.268236 0 0.0268236 ] [ 0.450981 0.270589 0 0.0270589 ]
[ 0.454902 0.272942 0 0.0272942 ] [ 0.458824 0.275295 0 0.0275295 ]
[ 0.462746 0.277648 0 0.0277648 ] [ 0.466667 0.28 0 0.028 ]
[ 0.470589 0.282353 0 0.0282353 ] [ 0.47451 0.284706 0 0.0284706 ]
[ 0.478432 0.287059 0 0.0287059 ] [ 0.482353 0.289412 0 0.0289412 ]
[ 0.486275 0.291765 0 0.0291765 ] [ 0.490197 0.294118 0 0.0294118 ]
[ 0.494118 0.296471 0 0.0296471 ] [ 0.49804 0.298824 0 0.0298824 ]
[ 0.501961 0.301177 0 0.0301177 ] [ 0.505883 0.30353 0 0.030353 ]
[ 0.509804 0.305883 0 0.0305883 ] [ 0.513726 0.308236 0 0.0308236 ]
[ 0.517648 0.310589 0 0.0310589 ] [ 0.521569 0.312942 0 0.0312942 ]
[ 0.525491 0.315295 0 0.0315295 ] [ 0.529412 0.317648 0 0.0317648 ]
[ 0.533334 0.32 0 0.032 ] [ 0.537255 0.322353 0 0.0322353 ]
[ 0.541177 0.324706 0 0.0324706 ] [ 0.545098 0.327059 0 0.0327059 ]
[ 0.54902 0.329412 0 0.0329412 ] [ 0.552942 0.331765 0 0.0331765 ]
[ 0.556863 0.334118 0 0.0334118 ] [ 0.560785 0.336471 0 0.0336471 ]
[ 0.564706 0.338824 0 0.0338824 ] [ 0.568628 0.341177 0 0.0341177 ]
[ 0.57255 0.34353 0 0.034353 ] [ 0.576471 0.345883 0 0.0345883 ]
[ 0.580393 0.348236 0 0.0348236 ] [ 0.584314 0.350589 0 0.0350589 ]
[ 0.588236 0.352942 0 0.0352942 ] [ 0.592157 0.355295 0 0.0355295 ]
[ 0.596079 0.357648 0 0.0357648 ] [ 0.6 0.36 0 0.036 ]
[ 0.603922 0.362353 0 0.0362353 ] [ 0.607844 0.364706 0 0.0364706 ]
[ 0.611765 0.367059 0 0.0367059 ] [ 0.615687 0.369412 0 0.0369412 ]
[ 0.619608 0.371765 0 0.0371765 ] [ 0.62353 0.374118 0 0.0374118 ]
[ 0.627451 0.376471 0 0.0376471 ] [ 0.631373 0.378824 0 0.0378824 ]
[ 0.635295 0.381177 0 0.0381177 ] [ 0.639216 0.38353 0 0.038353 ]
[ 0.643138 0.385883 0 0.0385883 ] [ 0.647059 0.388236 0 0.0388236 ]
[ 0.650981 0.390589 0 0.0390589 ] [ 0.654902 0.392942 0 0.0392942 ]
[ 0.658824 0.395295 0 0.0395295 ] [ 0.662746 0.397648 0 0.0397648 ]
[ 0.666667 0.4 0 0.04 ] [ 0.670589 0.402353 0 0.0402353 ]
[ 0.67451 0.404706 0 0.0404706 ] [ 0.678432 0.407059 0 0.0407059 ]
[ 0.682353 0.409412 0 0.0409412 ] [ 0.686275 0.411765 0 0.0411765 ]
[ 0.690197 0.414118 0 0.0414118 ] [ 0.694118 0.416471 0 0.0416471 ]
[ 0.69804 0.418824 0 0.0418824 ] [ 0.701961 0.421177 0 0.0421177 ]
[ 0.705883 0.42353 0 0.042353 ] [ 0.709804 0.425883 0 0.0425883 ]
[ 0.713726 0.428236 0 0.0428236 ] [ 0.717648 0.430589 0 0.0430589 ]
[ 0.721569 0.432942 0 0.0432942 ] [ 0.725491 0.435295 0 0.0435295 ]
[ 0.729412 0.437648 0 0.0437648 ] [ 0.733334 0.44 0 0.044 ]
[ 0.737255 0.442353 0 0.0442353 ] [ 0.741177 0.444706 0 0.0444706 ]
[ 0.745098 0.447059 0 0.0447059 ] [ 0.74902 0.449412 0 0.0449412 ]
[ 0.752942 0.451765 0 0.0451765 ] [ 0.756863 0.454118 0 0.0454118 ]
[ 0.760785 0.456471 0 0.0456471 ] [ 0.764706 0.458824 0 0.0458824 ]
[ 0.768628 0.461177 0 0.0461177 ] [ 0.77255 0.46353 0 0.046353 ]
[ 0.776471 0.465883 0 0.0465883 ] [ 0.780393 0.468236 0 0.0468236 ]
[ 0.784314 0.470589 0 0.0470589 ] [ 0.788236 0.472942 0 0.0472942 ]
[ 0.792157 0.475295 0 0.0475295 ] [ 0.796079 0.477648 0 0.0477648 ]
[ 0.8 0.48 0 0.048 ] [ 0.803922 0.482353 0 0.0482353 ]
[ 0.807844 0.484706 0 0.0484706 ] [ 0.811765 0.487059 0 0.0487059 ]
[ 0.815687 0.489412 0 0.0489412 ] [ 0.819608 0.491765 0 0.0491765 ]
[ 0.82353 0.494118 0 0.0494118 ] [ 0.827451 0.496471 0 0.0496471 ]
[ 0.831373 0.498824 0 0.0498824 ] [ 0.835295 0.501177 0 0.0501177 ]
[ 0.839216 0.50353 0 0.050353 ] [ 0.843138 0.505883 0 0.0505883 ]
[ 0.847059 0.508236 0 0.0508236 ] [ 0.850981 0.510589 0 0.0510589 ]
[ 0.854902 0.512942 0 0.0512942 ] [ 0.858824 0.515295 0 0.0515295 ]
[ 0.862746 0.517648 0 0.0517648 ] [ 0.866667 0.52 0 0.052 ]
[ 0.870589 0.522353 0 0.0522353 ] [ 0.87451 0.524706 0 0.0524706 ]
[ 0.878432 0.527059 0 0.0527059 ] [ 0.882353 0.529412 0 0.0529412 ]
[ 0.886275 0.531765 0 0.0531765 ] [ 0.890196 0.534118 0 0.0534118 ]
[ 0.894118 0.536471 0 0.0536471 ] [ 0.89804 0.538824 0 0.0538824 ]
[ 0.901961 0.541177 0 0.0541177 ] [ 0.905883 0.54353 0 0.054353 ]
[ 0.909804 0.545883 0 0.0545883 ] [ 0.913726 0.548236 0 0.0548236 ]
[ 0.917648 0.550589 0 0.0550589 ] [ 0.921569 0.552942 0 0.0552942 ]
[ 0.925491 0.555295 0 0.0555295 ] [ 0.929412 0.557648 0 0.0557648 ]
[ 0.933334 0.56 0 0.056 ] [ 0.937255 0.562353 0 0.0562353 ]
[ 0.941177 0.564706 0 0.0564706 ] [ 0.945098 0.567059 0 0.0567059 ]
[ 0.94902 0.569412 0 0.0569412 ] [ 0.952942 0.571765 0 0.0571765 ]
[ 0.956863 0.574118 0 0.0574118 ] [ 0.960785 0.576471 0 0.0576471 ]
[ 0.964706 0.578824 0 0.0578824 ] [ 0.968628 0.581177 0 0.0581177 ]
[ 0.972549 0.58353 0 0.058353 ] [ 0.976471 0.585883 0 0.0585883 ]
[ 0.980393 0.588236 0 0.0588236 ] [ 0.984314 0.590589 0 0.0590589 ]
[ 0.988236 0.592942 0 0.0592942 ] [ 0.992157 0.595295 0 0.0595295 ]
[ 0.996079 0.597648 0 0.0597648 ] [ 1 0.6 0 0.06 ]
] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
17.793 5.09376 mo
17.793 6.11231 17.793 6.95215 17.8467 7.39551 cv
17.878 7.70508 17.9424 7.93848 18.2598 7.98047 cv
18.4092 8.00098 18.6417 8.02247 18.7374 8.02247 cv
18.8008 8.02247 18.8223 8.05372 18.8223 8.08497 cv
18.8223 8.1377 18.7686 8.16895 18.6534 8.16895 cv
18.0694 8.16895 17.4004 8.1377 17.3467 8.1377 cv
17.294 8.1377 16.626 8.16895 16.3077 8.16895 cv
16.1905 8.16895 16.1377 8.14844 16.1377 8.08497 cv
16.1377 8.05372 16.1592 8.02247 16.2237 8.02247 cv
16.3174 8.02247 16.4463 8.00098 16.5401 7.98047 cv
16.753 7.93848 16.8057 7.70508 16.8487 7.39551 cv
16.9014 6.95215 16.9014 6.11231 16.9014 5.09376 cv
16.9014 3.97852 li
16.9014 3.93653 16.8702 3.91504 16.8379 3.91504 cv
12.3389 3.91504 li
12.3077 3.91504 12.2764 3.92579 12.2764 3.97852 cv
12.2764 5.09376 li
12.2764 6.11231 12.2764 6.95215 12.3292 7.39551 cv
12.3604 7.70508 12.4229 7.93848 12.7432 7.98047 cv
12.8897 8.00098 13.1241 8.02247 13.2198 8.02247 cv
13.2842 8.02247 13.3047 8.05372 13.3047 8.08497 cv
13.3047 8.1377 13.252 8.16895 13.1338 8.16895 cv
12.5518 8.16895 11.8829 8.1377 11.8301 8.1377 cv
11.7774 8.1377 11.1084 8.16895 10.7901 8.16895 cv
10.6729 8.16895 10.6202 8.14844 10.6202 8.08497 cv
10.6202 8.05372 10.6417 8.02247 10.7042 8.02247 cv
10.8018 8.02247 10.9278 8.00098 11.0235 7.98047 cv
11.2354 7.93848 11.2891 7.70508 11.3311 7.39551 cv
11.3838 6.95215 11.3838 6.11231 11.3838 5.09376 cv
11.3838 3.22559 li
11.3838 1.57129 11.3838 1.27344 11.3624 0.934571 cv
11.3428 0.573243 11.2569 0.404297 10.9073 0.329102 cv
10.8223 0.307618 10.6417 0.296876 10.5459 0.296876 cv
10.504 0.296876 10.46 0.275391 10.46 0.233399 cv
10.46 0.170899 10.5147 0.149415 10.6309 0.149415 cv
11.1084 0.149415 11.7774 0.180665 11.8301 0.180665 cv
11.8829 0.180665 12.5518 0.149415 12.8692 0.149415 cv
12.9864 0.149415 13.0401 0.170899 13.0401 0.233399 cv
13.0401 0.275391 12.9971 0.296876 12.9542 0.296876 cv
12.8799 0.296876 12.8174 0.307618 12.6895 0.329102 cv
12.4024 0.382813 12.3184 0.563477 12.2969 0.934571 cv
12.2764 1.27344 12.2764 1.57129 12.2764 3.22559 cv
12.2764 3.44825 li
12.2764 3.50098 12.3077 3.5127 12.3389 3.5127 cv
16.8379 3.5127 li
16.8702 3.5127 16.9014 3.50098 16.9014 3.44825 cv
16.9014 3.22559 li
16.9014 1.57129 16.9014 1.27344 16.8799 0.934571 cv
16.8584 0.573243 16.7745 0.404297 16.4249 0.329102 cv
16.3389 0.307618 16.1592 0.296876 16.0635 0.296876 cv
16.0215 0.296876 15.9795 0.275391 15.9795 0.233399 cv
15.9795 0.170899 16.0323 0.149415 16.1485 0.149415 cv
16.626 0.149415 17.294 0.180665 17.3467 0.180665 cv
17.4004 0.180665 18.0694 0.149415 18.3877 0.149415 cv
18.504 0.149415 18.5567 0.170899 18.5567 0.233399 cv
18.5567 0.275391 18.5147 0.296876 18.4727 0.296876 cv
18.3975 0.296876 18.334 0.307618 18.2071 0.329102 cv
17.9209 0.382813 17.835 0.563477 17.8145 0.934571 cv
17.793 1.27344 17.793 1.57129 17.793 3.22559 cv
17.793 5.09376 li
1 /0 get_csd
sepcs
1 sep
f
24.001 3.22559 mo
24.001 1.57129 24.001 1.27344 23.9795 0.934571 cv
23.9581 0.573243 23.8731 0.404297 23.5225 0.329102 cv
23.4385 0.307618 23.2579 0.296876 23.1622 0.296876 cv
23.1202 0.296876 23.0772 0.275391 23.0772 0.233399 cv
23.0772 0.170899 23.1299 0.149415 23.2471 0.149415 cv
23.7247 0.149415 24.3936 0.180665 24.4463 0.180665 cv
24.5206 0.180665 26.6319 0.180665 26.876 0.170899 cv
27.0772 0.15918 27.2471 0.138672 27.3321 0.118165 cv
27.3858 0.106446 27.4278 0.0634766 27.4805 0.0634766 cv
27.5127 0.0634766 27.5225 0.106446 27.5225 0.15918 cv
27.5225 0.233399 27.4698 0.362305 27.4385 0.65918 cv
27.4278 0.763672 27.4073 1.23047 27.3858 1.35938 cv
27.3741 1.41114 27.3536 1.47461 27.3116 1.47461 cv
27.2471 1.47461 27.2256 1.42188 27.2256 1.33887 cv
27.2256 1.2627 27.2159 1.08301 27.1631 0.955079 cv
27.0879 0.785157 26.9815 0.65918 26.4092 0.594727 cv
26.2286 0.573243 25.0713 0.563477 24.9551 0.563477 cv
24.9131 0.563477 24.8917 0.594727 24.8917 0.668946 cv
24.8917 3.59766 li
24.8917 3.6709 24.9024 3.70313 24.9551 3.70313 cv
25.0928 3.70313 26.3985 3.70313 26.6416 3.68262 cv
26.8975 3.66114 27.046 3.63965 27.1416 3.53418 cv
27.2159 3.44825 27.2579 3.39551 27.2999 3.39551 cv
27.3321 3.39551 27.3536 3.417 27.3536 3.4795 cv
27.3536 3.54493 27.2999 3.72364 27.2686 4.0752 cv
27.2471 4.28809 27.2256 4.67872 27.2256 4.75489 cv
27.2256 4.83887 27.2256 4.95411 27.1514 4.95411 cv
27.0987 4.95411 27.0772 4.91309 27.0772 4.86036 cv
27.0772 4.75489 27.0772 4.64747 27.0352 4.51075 cv
26.9922 4.36133 26.8975 4.18067 26.4834 4.1377 cv
26.1963 4.10645 25.1465 4.08594 24.9659 4.08594 cv
24.9131 4.08594 24.8917 4.11817 24.8917 4.15918 cv
24.8917 5.09376 li
24.8917 5.45313 24.8819 6.68458 24.8917 6.90723 cv
24.9229 7.63965 25.0831 7.77832 26.1221 7.77832 cv
26.3985 7.77832 26.8653 7.77832 27.1416 7.66016 cv
27.417 7.54395 27.544 7.33204 27.6182 6.89747 cv
27.6397 6.78126 27.6612 6.73926 27.7139 6.73926 cv
27.7784 6.73926 27.7784 6.82325 27.7784 6.89747 cv
27.7784 6.9834 27.6924 7.70508 27.6397 7.92676 cv
27.5655 8.20313 27.4805 8.20313 27.0674 8.20313 cv
25.4649 8.20313 24.754 8.1377 24.4463 8.1377 cv
24.3936 8.1377 23.7247 8.16895 23.4063 8.16895 cv
23.2901 8.16895 23.2354 8.14844 23.2354 8.08497 cv
23.2354 8.05372 23.2579 8.02247 23.3213 8.02247 cv
23.417 8.02247 23.544 8.00098 23.6397 7.98047 cv
23.8516 7.93848 23.9053 7.70508 23.9463 7.39551 cv
24.001 6.95215 24.001 6.11231 24.001 5.09376 cv
24.001 3.22559 li
1 /0 get_csd
sepcs
1 sep
f
38.1651 3.22559 mo
38.1651 1.57129 38.1651 1.27344 38.1436 0.934571 cv
38.1231 0.573243 38.0381 0.404297 37.6885 0.329102 cv
37.6026 0.307618 37.4229 0.296876 37.3272 0.296876 cv
37.2852 0.296876 37.2422 0.275391 37.2422 0.233399 cv
37.2422 0.170899 37.296 0.149415 37.4122 0.149415 cv
37.8897 0.149415 38.5362 0.180665 38.6319 0.180665 cv
38.7276 0.180665 39.3643 0.149415 39.6827 0.149415 cv
39.7999 0.149415 39.8526 0.170899 39.8526 0.233399 cv
39.8526 0.275391 39.8096 0.296876 39.7676 0.296876 cv
39.6934 0.296876 39.6299 0.307618 39.503 0.329102 cv
39.2159 0.372071 39.1319 0.563477 39.1104 0.934571 cv
39.0889 1.27344 39.0889 1.57129 39.0889 3.22559 cv
39.0889 4.71094 li
39.0889 6.24122 39.4288 6.89747 39.8838 7.33204 cv
40.4053 7.82032 40.8819 7.91504 41.4864 7.91504 cv
42.1338 7.91504 42.7706 7.6084 43.1534 7.15137 cv
43.6407 6.54786 43.7686 5.64454 43.7686 4.55372 cv
43.7686 3.22559 li
43.7686 1.57129 43.7686 1.27344 43.7471 0.934571 cv
43.7256 0.573243 43.6407 0.404297 43.2901 0.329102 cv
43.2051 0.307618 43.0254 0.296876 42.9297 0.296876 cv
42.8877 0.296876 42.8448 0.275391 42.8448 0.233399 cv
42.8448 0.170899 42.8975 0.149415 43.0147 0.149415 cv
43.4922 0.149415 44.0752 0.180665 44.1397 0.180665 cv
44.2139 0.180665 44.712 0.149415 45.0303 0.149415 cv
45.1475 0.149415 45.2002 0.170899 45.2002 0.233399 cv
45.2002 0.275391 45.1573 0.296876 45.1153 0.296876 cv
45.0411 0.296876 44.9776 0.296876 44.8506 0.329102 cv
44.5635 0.382813 44.4795 0.563477 44.4581 0.934571 cv
44.4366 1.27344 44.4366 1.57129 44.4366 3.22559 cv
44.4366 4.36133 li
44.4366 5.50879 44.3096 6.78126 43.46 7.53418 cv
42.6963 8.21387 41.9004 8.31934 41.2745 8.31934 cv
40.9141 8.31934 39.8428 8.27637 39.0889 7.56544 cv
38.5694 7.06739 38.1651 6.32422 38.1651 4.77637 cv
38.1651 3.22559 li
1 /0 get_csd
sepcs
1 sep
f
50.3038 6.72852 mo
50.3252 7.59668 50.4307 7.87305 50.7178 7.95997 cv
50.919 8.01172 51.1534 8.02247 51.2491 8.02247 cv
51.3018 8.02247 51.3331 8.04395 51.3331 8.08497 cv
51.3331 8.14844 51.2696 8.16895 51.1416 8.16895 cv
50.5381 8.16895 50.1133 8.1377 50.0176 8.1377 cv
49.9219 8.1377 49.4766 8.16895 48.9991 8.16895 cv
48.8926 8.16895 48.8292 8.15918 48.8292 8.08497 cv
48.8292 8.04395 48.8604 8.02247 48.9141 8.02247 cv
48.9991 8.02247 49.1905 8.01172 49.3487 7.95997 cv
49.6143 7.88379 49.667 7.57618 49.667 6.61036 cv
49.6778 0.530274 li
49.6778 0.118165 49.71 0 49.794 0 cv
49.8799 0 50.0596 0.233399 50.1661 0.340821 cv
50.3252 0.519532 51.9063 2.22754 53.5401 3.97852 cv
54.5909 5.1045 55.7471 6.39747 56.087 6.74903 cv
55.9698 1.35938 li
55.96 0.668946 55.8858 0.435547 55.5567 0.350586 cv
55.3653 0.307618 55.1211 0.296876 55.0362 0.296876 cv
54.962 0.296876 54.9522 0.264649 54.9522 0.222657 cv
54.9522 0.15918 55.0362 0.149415 55.1631 0.149415 cv
55.6416 0.149415 56.1504 0.180665 56.2666 0.180665 cv
56.3838 0.180665 56.7334 0.149415 57.169 0.149415 cv
57.2862 0.149415 57.3604 0.15918 57.3604 0.222657 cv
57.3604 0.264649 57.3174 0.296876 57.2432 0.296876 cv
57.1905 0.296876 57.1163 0.296876 56.9893 0.329102 cv
56.6387 0.404297 56.5967 0.637696 56.5967 1.27344 cv
56.5752 7.49219 li
56.5752 8.19239 56.5538 8.24512 56.4795 8.24512 cv
56.3946 8.24512 56.2666 8.12794 55.7042 7.56544 cv
55.5879 7.46094 54.0606 5.89942 52.9356 4.68946 cv
51.7042 3.36426 50.5059 2.02637 50.1661 1.64551 cv
50.3038 6.72852 li
1 /0 get_csd
sepcs
1 sep
f
63.3877 5.09376 mo
63.3877 6.11231 63.3877 6.95215 63.4405 7.39551 cv
63.4717 7.70508 63.5362 7.93848 63.8536 7.98047 cv
64.003 8.00098 64.2354 8.02247 64.3311 8.02247 cv
64.3956 8.02247 64.4161 8.05372 64.4161 8.08497 cv
64.4161 8.1377 64.3633 8.16895 64.2471 8.16895 cv
63.6631 8.16895 62.9942 8.1377 62.9415 8.1377 cv
62.8877 8.1377 62.2198 8.16895 61.9014 8.16895 cv
61.7842 8.16895 61.7315 8.14844 61.7315 8.08497 cv
61.7315 8.05372 61.753 8.02247 61.8174 8.02247 cv
61.9131 8.02247 62.0401 8.00098 62.1348 7.98047 cv
62.3477 7.93848 62.4004 7.70508 62.4424 7.39551 cv
62.4952 6.95215 62.4952 6.11231 62.4952 5.09376 cv
62.4952 3.22559 li
62.4952 1.57129 62.4952 1.27344 62.4747 0.934571 cv
62.4522 0.573243 62.3477 0.393555 62.1143 0.340821 cv
61.9971 0.307618 61.8594 0.296876 61.7842 0.296876 cv
61.7422 0.296876 61.7002 0.275391 61.7002 0.233399 cv
61.7002 0.170899 61.753 0.149415 61.8702 0.149415 cv
62.2198 0.149415 62.8877 0.180665 62.9415 0.180665 cv
62.9942 0.180665 63.6631 0.149415 63.9815 0.149415 cv
64.0987 0.149415 64.1514 0.170899 64.1514 0.233399 cv
64.1514 0.275391 64.1084 0.296876 64.0665 0.296876 cv
63.9913 0.296876 63.9278 0.307618 63.7999 0.329102 cv
63.5147 0.382813 63.4288 0.563477 63.4082 0.934571 cv
63.3877 1.27344 63.3877 1.57129 63.3877 3.22559 cv
63.3877 5.09376 li
1 /0 get_csd
sepcs
1 sep
f
71.8965 6.87598 mo
72.5127 5.45313 73.9346 1.75098 74.167 0.986329 cv
74.2198 0.829102 74.2627 0.679688 74.2627 0.584961 cv
74.2627 0.499024 74.2315 0.393555 74.125 0.340821 cv
73.9971 0.296876 73.8389 0.296876 73.7217 0.296876 cv
73.6582 0.296876 73.6045 0.286133 73.6045 0.233399 cv
73.6045 0.170899 73.669 0.149415 73.8389 0.149415 cv
74.2627 0.149415 74.751 0.180665 74.878 0.180665 cv
74.9424 0.180665 75.3985 0.149415 75.7061 0.149415 cv
75.8223 0.149415 75.8858 0.170899 75.8858 0.222657 cv
75.8858 0.275391 75.8438 0.296876 75.7588 0.296876 cv
75.6846 0.296876 75.4512 0.296876 75.2491 0.424805 cv
75.1124 0.519532 74.9522 0.700196 74.6661 1.42188 cv
74.5499 1.71876 74.0186 2.99122 73.4776 4.29786 cv
72.8311 5.84668 72.3526 6.99317 72.1084 7.5127 cv
71.8116 8.14844 71.7686 8.31934 71.6631 8.31934 cv
71.5362 8.31934 71.4834 8.16895 71.2813 7.66016 cv
68.6817 1.15723 li
68.4483 0.563477 68.2891 0.44629 67.917 0.340821 cv
67.7588 0.296876 67.5782 0.296876 67.5147 0.296876 cv
67.4502 0.296876 67.4297 0.264649 67.4297 0.222657 cv
67.4297 0.15918 67.5362 0.149415 67.7051 0.149415 cv
68.2149 0.149415 68.8194 0.180665 68.9463 0.180665 cv
69.0528 0.180665 69.5303 0.149415 69.9346 0.149415 cv
70.1241 0.149415 70.2198 0.170899 70.2198 0.222657 cv
70.2198 0.275391 70.1885 0.296876 70.1143 0.296876 cv
69.9971 0.296876 69.8057 0.307618 69.711 0.350586 cv
69.5948 0.404297 69.5733 0.488282 69.5733 0.563477 cv
69.5733 0.700196 69.7002 1.0293 69.8594 1.44336 cv
71.8965 6.87598 li
1 /0 get_csd
sepcs
1 sep
f
79.8975 3.22559 mo
79.8975 1.57129 79.8975 1.27344 79.876 0.934571 cv
79.8545 0.573243 79.7686 0.404297 79.419 0.329102 cv
79.335 0.307618 79.1553 0.296876 79.0596 0.296876 cv
79.0166 0.296876 78.9737 0.275391 78.9737 0.233399 cv
78.9737 0.170899 79.0264 0.149415 79.1436 0.149415 cv
79.6221 0.149415 80.2901 0.180665 80.3428 0.180665 cv
80.417 0.180665 82.5284 0.180665 82.7725 0.170899 cv
82.9747 0.15918 83.1436 0.138672 83.2295 0.118165 cv
83.2823 0.106446 83.3243 0.0634766 83.378 0.0634766 cv
83.4092 0.0634766 83.419 0.106446 83.419 0.15918 cv
83.419 0.233399 83.3663 0.362305 83.335 0.65918 cv
83.3243 0.763672 83.3038 1.23047 83.2823 1.35938 cv
83.2706 1.41114 83.25 1.47461 83.2071 1.47461 cv
83.1436 1.47461 83.1221 1.42188 83.1221 1.33887 cv
83.1221 1.2627 83.1124 1.08301 83.0596 0.955079 cv
82.9854 0.785157 82.878 0.65918 82.3057 0.594727 cv
82.126 0.573243 80.9688 0.563477 80.8526 0.563477 cv
80.8096 0.563477 80.7881 0.594727 80.7881 0.668946 cv
80.7881 3.59766 li
80.7881 3.6709 80.7989 3.70313 80.8526 3.70313 cv
80.9893 3.70313 82.294 3.70313 82.5391 3.68262 cv
82.794 3.66114 82.9424 3.63965 83.0381 3.53418 cv
83.1124 3.44825 83.1553 3.39551 83.1963 3.39551 cv
83.2295 3.39551 83.25 3.417 83.25 3.4795 cv
83.25 3.54493 83.1963 3.72364 83.1651 4.0752 cv
83.1436 4.28809 83.1221 4.67872 83.1221 4.75489 cv
83.1221 4.83887 83.1221 4.95411 83.0479 4.95411 cv
82.9952 4.95411 82.9747 4.91309 82.9747 4.86036 cv
82.9747 4.75489 82.9747 4.64747 82.9317 4.51075 cv
82.8897 4.36133 82.794 4.18067 82.3799 4.1377 cv
82.0938 4.10645 81.043 4.08594 80.8624 4.08594 cv
80.8096 4.08594 80.7881 4.11817 80.7881 4.15918 cv
80.7881 5.09376 li
80.7881 5.45313 80.7784 6.68458 80.7881 6.90723 cv
80.8194 7.63965 80.9795 7.77832 82.0186 7.77832 cv
82.294 7.77832 82.7618 7.77832 83.0381 7.66016 cv
83.3135 7.54395 83.4405 7.33204 83.5147 6.89747 cv
83.5362 6.78126 83.5577 6.73926 83.6104 6.73926 cv
83.6749 6.73926 83.6749 6.82325 83.6749 6.89747 cv
83.6749 6.9834 83.5899 7.70508 83.5362 7.92676 cv
83.462 8.20313 83.378 8.20313 82.9629 8.20313 cv
81.3614 8.20313 80.6504 8.1377 80.3428 8.1377 cv
80.2901 8.1377 79.6221 8.16895 79.3028 8.16895 cv
79.1866 8.16895 79.1338 8.14844 79.1338 8.08497 cv
79.1338 8.05372 79.1553 8.02247 79.2178 8.02247 cv
79.3135 8.02247 79.4405 8.00098 79.5362 7.98047 cv
79.7491 7.93848 79.8018 7.70508 79.8438 7.39551 cv
79.8975 6.95215 79.8975 6.11231 79.8975 5.09376 cv
79.8975 3.22559 li
1 /0 get_csd
sepcs
1 sep
f
88.7999 3.22559 mo
88.7999 1.57129 88.7999 1.27344 88.7784 0.934571 cv
88.7569 0.573243 88.6719 0.404297 88.3213 0.329102 cv
88.2374 0.307618 88.0567 0.296876 87.961 0.296876 cv
87.919 0.296876 87.876 0.275391 87.876 0.233399 cv
87.876 0.170899 87.9288 0.149415 88.046 0.149415 cv
88.5235 0.149415 89.1924 0.180665 89.2452 0.180665 cv
89.3614 0.180665 90.168 0.149415 90.4971 0.149415 cv
91.1651 0.149415 91.876 0.211915 92.4385 0.616211 cv
92.7042 0.807618 93.171 1.32715 93.171 2.05958 cv
93.171 2.84473 92.8428 3.62989 91.8868 4.51075 cv
92.7569 5.62403 93.4786 6.56836 94.0948 7.22754 cv
94.667 7.83106 95.1241 7.94825 95.3887 7.99122 cv
95.5899 8.02247 95.7383 8.02247 95.8028 8.02247 cv
95.8555 8.02247 95.8975 8.05372 95.8975 8.08497 cv
95.8975 8.14844 95.834 8.16895 95.6436 8.16895 cv
94.8897 8.16895 li
94.296 8.16895 94.0303 8.11719 93.7549 7.96973 cv
93.2979 7.72559 92.9268 7.20606 92.3213 6.40918 cv
91.876 5.8252 91.378 5.11426 91.1651 4.83887 cv
91.1231 4.79688 91.0909 4.77637 91.0284 4.77637 cv
89.7227 4.75489 li
89.669 4.75489 89.6485 4.78614 89.6485 4.83887 cv
89.6485 5.09376 li
89.6485 6.11231 89.6485 6.95215 89.7012 7.39551 cv
89.7334 7.70508 89.7969 7.93848 90.1143 7.98047 cv
90.2637 8.00098 90.4971 8.02247 90.5928 8.02247 cv
90.6563 8.02247 90.6778 8.05372 90.6778 8.08497 cv
90.6778 8.1377 90.6241 8.16895 90.5079 8.16895 cv
89.9239 8.16895 89.2559 8.1377 89.2022 8.1377 cv
89.1924 8.1377 88.5235 8.16895 88.2051 8.16895 cv
88.0889 8.16895 88.0362 8.14844 88.0362 8.08497 cv
88.0362 8.05372 88.0567 8.02247 88.1202 8.02247 cv
88.2159 8.02247 88.3428 8.00098 88.4385 7.98047 cv
88.6504 7.93848 88.7042 7.70508 88.7471 7.39551 cv
88.7999 6.95215 88.7999 6.11231 88.7999 5.09376 cv
88.7999 3.22559 li
cp
89.6485 4.14942 mo
89.6485 4.20118 89.669 4.24512 89.7227 4.27735 cv
89.8819 4.37208 90.3702 4.44532 90.837 4.44532 cv
91.0909 4.44532 91.3877 4.41407 91.6329 4.24512 cv
92.004 3.98926 92.2803 3.417 92.2803 2.61133 cv
92.2803 1.28418 91.5792 0.488282 90.4444 0.488282 cv
90.126 0.488282 89.8389 0.519532 89.7334 0.551758 cv
89.6797 0.573243 89.6485 0.616211 89.6485 0.679688 cv
89.6485 4.14942 li
1 /0 get_csd
sepcs
1 sep
f
98.4473 8.03223 mo
98.2979 7.95997 98.2881 7.91504 98.2881 7.62891 cv
98.2881 7.09864 98.3301 6.67383 98.3409 6.50489 cv
98.3516 6.3877 98.3721 6.33497 98.4249 6.33497 cv
98.4893 6.33497 98.501 6.36622 98.501 6.45118 cv
98.501 6.54786 98.501 6.69532 98.5323 6.84473 cv
98.6905 7.62891 99.3916 7.92676 100.103 7.92676 cv
101.122 7.92676 101.62 7.19532 101.62 6.51661 cv
101.62 5.78418 101.312 5.3584 100.4 4.60547 cv
99.9219 4.21192 li
98.7969 3.29004 98.542 2.63184 98.542 1.91016 cv
98.542 0.774415 99.3916 0 100.74 0 cv
101.154 0 101.46 0.0419922 101.726 0.106446 cv
101.927 0.149415 102.012 0.15918 102.097 0.15918 cv
102.182 0.15918 102.204 0.180665 102.204 0.233399 cv
102.204 0.286133 102.162 0.637696 102.162 1.35938 cv
102.162 1.52833 102.14 1.60254 102.087 1.60254 cv
102.023 1.60254 102.012 1.54981 102.001 1.46387 cv
101.992 1.33887 101.927 1.05079 101.864 0.934571 cv
101.8 0.817383 101.514 0.372071 100.538 0.372071 cv
99.8047 0.372071 99.2325 0.829102 99.2325 1.60254 cv
99.2325 2.20704 99.5294 2.56934 100.527 3.38575 cv
100.824 3.61817 li
102.076 4.60547 102.374 5.26465 102.374 6.11231 cv
102.374 6.54786 102.204 7.35254 101.471 7.87305 cv
101.015 8.19239 100.442 8.31934 99.8682 8.31934 cv
99.3702 8.31934 98.8819 8.24512 98.4473 8.03223 cv
1 /0 get_csd
sepcs
1 sep
f
108.496 5.09376 mo
108.496 6.11231 108.496 6.95215 108.548 7.39551 cv
108.581 7.70508 108.644 7.93848 108.962 7.98047 cv
109.111 8.00098 109.345 8.02247 109.44 8.02247 cv
109.503 8.02247 109.525 8.05372 109.525 8.08497 cv
109.525 8.1377 109.472 8.16895 109.355 8.16895 cv
108.772 8.16895 108.103 8.1377 108.05 8.1377 cv
107.998 8.1377 107.329 8.16895 107.01 8.16895 cv
106.894 8.16895 106.84 8.14844 106.84 8.08497 cv
106.84 8.05372 106.861 8.02247 106.925 8.02247 cv
107.021 8.02247 107.148 8.00098 107.244 7.98047 cv
107.456 7.93848 107.509 7.70508 107.551 7.39551 cv
107.604 6.95215 107.604 6.11231 107.604 5.09376 cv
107.604 3.22559 li
107.604 1.57129 107.604 1.27344 107.584 0.934571 cv
107.562 0.573243 107.456 0.393555 107.222 0.340821 cv
107.105 0.307618 106.968 0.296876 106.894 0.296876 cv
106.851 0.296876 106.808 0.275391 106.808 0.233399 cv
106.808 0.170899 106.861 0.149415 106.978 0.149415 cv
107.329 0.149415 107.998 0.180665 108.05 0.180665 cv
108.103 0.180665 108.772 0.149415 109.09 0.149415 cv
109.207 0.149415 109.259 0.170899 109.259 0.233399 cv
109.259 0.275391 109.217 0.296876 109.175 0.296876 cv
109.101 0.296876 109.037 0.307618 108.91 0.329102 cv
108.623 0.382813 108.539 0.563477 108.517 0.934571 cv
108.496 1.27344 108.496 1.57129 108.496 3.22559 cv
108.496 5.09376 li
1 /0 get_csd
sepcs
1 sep
f
116.962 5.09376 mo
116.962 6.11231 116.962 6.95215 117.016 7.39551 cv
117.048 7.70508 117.111 7.93848 117.429 7.98047 cv
117.578 8.00098 117.812 8.02247 117.908 8.02247 cv
117.971 8.02247 117.993 8.05372 117.993 8.08497 cv
117.993 8.1377 117.939 8.16895 117.822 8.16895 cv
117.238 8.16895 116.57 8.1377 116.517 8.1377 cv
116.464 8.1377 115.795 8.16895 115.477 8.16895 cv
115.361 8.16895 115.308 8.14844 115.308 8.08497 cv
115.308 8.05372 115.329 8.02247 115.392 8.02247 cv
115.488 8.02247 115.615 8.00098 115.71 7.98047 cv
115.923 7.93848 115.976 7.70508 116.019 7.39551 cv
116.072 6.95215 116.072 6.11231 116.072 5.09376 cv
116.072 0.606446 li
114.501 0.626954 li
113.843 0.637696 113.588 0.710938 113.419 0.965821 cv
113.302 1.14747 113.27 1.21973 113.238 1.29493 cv
113.207 1.37989 113.175 1.40137 113.132 1.40137 cv
113.101 1.40137 113.08 1.37012 113.08 1.30567 cv
113.08 1.19922 113.292 0.286133 113.313 0.202149 cv
113.334 0.138672 113.376 0 113.419 0 cv
113.494 0 113.599 0.106446 113.886 0.12793 cv
114.194 0.15918 114.597 0.180665 114.724 0.180665 cv
118.703 0.180665 li
119.382 0.180665 119.668 0.0751954 119.753 0.0751954 cv
119.806 0.0751954 119.806 0.138672 119.806 0.202149 cv
119.806 0.519532 119.775 1.25098 119.775 1.37012 cv
119.775 1.46387 119.743 1.50684 119.701 1.50684 cv
119.647 1.50684 119.626 1.47461 119.616 1.32715 cv
119.605 1.20997 li
119.562 0.891602 119.318 0.647461 118.299 0.626954 cv
116.962 0.606446 li
116.962 5.09376 li
1 /0 get_csd
sepcs
1 sep
f
125.876 5.42188 mo
125.876 4.84961 125.769 4.61622 125.631 4.30958 cv
125.557 4.1377 124.136 1.80469 123.764 1.25098 cv
123.499 0.860352 123.233 0.594727 123.042 0.467774 cv
122.882 0.362305 122.682 0.296876 122.586 0.296876 cv
122.534 0.296876 122.48 0.275391 122.48 0.222657 cv
122.48 0.180665 122.523 0.149415 122.618 0.149415 cv
122.82 0.149415 123.615 0.180665 123.668 0.180665 cv
123.743 0.180665 124.146 0.149415 124.56 0.149415 cv
124.676 0.149415 124.698 0.180665 124.698 0.222657 cv
124.698 0.264649 124.634 0.275391 124.539 0.31836 cv
124.453 0.362305 124.401 0.424805 124.401 0.50879 cv
124.401 0.637696 124.453 0.763672 124.539 0.923829 cv
124.709 1.23047 126.299 3.96778 126.492 4.27735 cv
126.693 3.83106 128.041 1.50684 128.252 1.15723 cv
128.39 0.934571 128.433 0.75293 128.433 0.616211 cv
128.433 0.467774 128.39 0.350586 128.263 0.31836 cv
128.167 0.286133 128.104 0.264649 128.104 0.211915 cv
128.104 0.170899 128.167 0.149415 128.274 0.149415 cv
128.549 0.149415 128.888 0.180665 128.974 0.180665 cv
129.038 0.180665 129.802 0.149415 130.003 0.149415 cv
130.078 0.149415 130.141 0.170899 130.141 0.211915 cv
130.141 0.264649 130.087 0.296876 130.003 0.296876 cv
129.886 0.296876 129.685 0.340821 129.515 0.44629 cv
129.303 0.573243 129.187 0.700196 128.953 0.986329 cv
128.603 1.41114 127.117 3.90528 126.925 4.36133 cv
126.767 4.74415 126.767 5.07325 126.767 5.42188 cv
126.767 6.33497 li
126.767 6.50489 126.767 6.95215 126.798 7.39551 cv
126.82 7.70508 126.916 7.93848 127.234 7.98047 cv
127.382 8.00098 127.616 8.02247 127.711 8.02247 cv
127.775 8.02247 127.796 8.05372 127.796 8.08497 cv
127.796 8.1377 127.743 8.16895 127.626 8.16895 cv
127.042 8.16895 126.375 8.1377 126.321 8.1377 cv
126.268 8.1377 125.6 8.16895 125.281 8.16895 cv
125.165 8.16895 125.112 8.14844 125.112 8.08497 cv
125.112 8.05372 125.133 8.02247 125.196 8.02247 cv
125.292 8.02247 125.419 8.00098 125.515 7.98047 cv
125.728 7.93848 125.822 7.70508 125.844 7.39551 cv
125.876 6.95215 125.876 6.50489 125.876 6.33497 cv
125.876 5.42188 li
1 /0 get_csd
sepcs
1 sep
f
142.917 0 mo
145.303 0 147.086 1.50684 147.086 3.97852 cv
147.086 6.35645 145.41 8.31934 142.853 8.31934 cv
139.945 8.31934 138.736 6.05958 138.736 4.14942 cv
138.736 2.43067 139.988 0 142.917 0 cv
cp
143.139 7.91504 mo
144.094 7.91504 146.068 7.36426 146.068 4.27735 cv
146.068 1.7295 144.518 0.362305 142.842 0.362305 cv
141.07 0.362305 139.744 1.52833 139.744 3.85254 cv
139.744 6.32422 141.229 7.91504 143.139 7.91504 cv
1 /0 get_csd
sepcs
1 sep
f
151.484 3.22559 mo
151.484 1.57129 151.484 1.27344 151.462 0.934571 cv
151.442 0.573243 151.357 0.404297 151.006 0.329102 cv
150.921 0.307618 150.742 0.296876 150.646 0.296876 cv
150.603 0.296876 150.561 0.275391 150.561 0.233399 cv
150.561 0.170899 150.615 0.149415 150.731 0.149415 cv
151.208 0.149415 151.876 0.180665 151.93 0.180665 cv
152.142 0.180665 154.296 0.180665 154.541 0.170899 cv
154.742 0.15918 154.912 0.15918 155.007 0.12793 cv
155.071 0.106446 155.113 0.0634766 155.156 0.0634766 cv
155.198 0.0634766 155.219 0.106446 155.219 0.15918 cv
155.219 0.233399 155.167 0.362305 155.134 0.65918 cv
155.125 0.763672 155.102 1.23047 155.082 1.35938 cv
155.071 1.41114 155.049 1.47461 154.997 1.47461 cv
154.943 1.47461 154.921 1.42188 154.921 1.34864 cv
154.921 1.2627 154.89 1.08301 154.827 0.944336 cv
154.763 0.807618 154.519 0.616211 154.105 0.606446 cv
152.471 0.573243 li
152.408 0.573243 152.376 0.606446 152.376 0.69043 cv
152.376 3.61817 li
152.376 3.68262 152.386 3.71387 152.45 3.71387 cv
153.808 3.70313 li
153.988 3.70313 154.137 3.70313 154.286 3.69239 cv
154.541 3.6709 154.678 3.63965 154.773 3.50098 cv
154.816 3.44825 154.848 3.39551 154.89 3.39551 cv
154.933 3.39551 154.943 3.42676 154.943 3.4795 cv
154.943 3.54493 154.89 3.72364 154.859 4.0752 cv
154.837 4.28809 154.816 4.71094 154.816 4.78614 cv
154.816 4.88086 154.816 4.98731 154.742 4.98731 cv
154.689 4.98731 154.668 4.94434 154.668 4.89161 cv
154.658 4.78614 154.646 4.63672 154.604 4.51075 cv
154.55 4.36133 154.38 4.16993 154.052 4.12793 cv
153.787 4.09668 152.63 4.09668 152.45 4.09668 cv
152.397 4.09668 152.376 4.11817 152.376 4.19043 cv
152.376 5.09376 li
152.376 6.11231 152.376 6.95215 152.429 7.39551 cv
152.46 7.70508 152.524 7.93848 152.842 7.98047 cv
152.991 8.00098 153.224 8.02247 153.32 8.02247 cv
153.383 8.02247 153.406 8.05372 153.406 8.08497 cv
153.406 8.1377 153.351 8.16895 153.235 8.16895 cv
152.651 8.16895 151.983 8.1377 151.93 8.1377 cv
151.876 8.1377 151.208 8.16895 150.89 8.16895 cv
150.773 8.16895 150.72 8.14844 150.72 8.08497 cv
150.72 8.05372 150.742 8.02247 150.805 8.02247 cv
150.901 8.02247 151.028 8.00098 151.124 7.98047 cv
151.335 7.93848 151.388 7.70508 151.431 7.39551 cv
151.484 6.95215 151.484 6.11231 151.484 5.09376 cv
151.484 3.22559 li
1 /0 get_csd
sepcs
1 sep
f
130.495 20.9327 mo
130.495 20.0694 130.421 19.2774 130.421 18.4834 cv
130.421 17.6202 130.495 16.753 130.495 15.961 cv
128.98 15.5987 127.322 15.4561 125.736 15.4561 cv
119.754 15.4561 114.924 20.3575 114.924 26.1963 cv
114.924 32.1807 120.042 35.712 125.664 35.712 cv
127.322 35.712 128.98 35.4229 130.71 34.9913 cv
130.71 34.1963 130.638 33.4073 130.638 32.5381 cv
130.638 31.7471 130.71 30.9542 130.71 30.1622 cv
128.908 33.7647 li
127.61 34.3428 126.675 34.5606 125.305 34.5606 cv
121.99 34.5606 118.025 32.3965 118.025 25.5489 cv
118.025 19.4209 121.196 16.6807 125.305 16.6807 cv
126.531 16.6807 127.539 16.8985 128.837 17.4756 cv
130.495 20.9327 li
1 /0 get_csd
sepcs
1 sep
f
0.163086 15.8165 mo
1.31543 16.1768 2.03711 16.4659 2.39844 16.8252 cv
2.68653 16.9717 2.90333 17.4756 3.33497 18.7706 cv
4.99415 24.3213 6.86817 30.3057 8.38086 35.712 cv
9.17579 35.712 li
10.7598 30.6661 12.9942 25.6221 15.0127 20.6465 cv
16.96 25.6905 19.1221 30.7374 20.7803 35.712 cv
21.5723 35.712 li
22.294 33.4073 24.4561 26.7725 27.4131 19.2042 cv
28.1319 17.4756 28.4932 16.3213 30.0059 15.8165 cv
28.9249 15.961 27.9161 16.1045 26.835 16.1045 cv
24.3116 22.8086 22.3653 28.503 21.7178 30.6661 cv
19.6973 25.6221 17.8243 20.5743 16.0225 15.4561 cv
15.4454 15.4561 li
13.7159 20.4288 11.625 25.4034 9.60645 30.3057 cv
8.3086 25.6905 6.72364 20.7901 5.28028 16.1045 cv
3.83887 16.1045 1.6045 15.961 0.163086 15.8165 cv
1 /0 get_csd
sepcs
1 sep
f
69.9434 15.8165 mo
71.0245 16.1768 71.7442 16.4659 72.1749 16.8252 cv
72.3936 16.9717 72.6807 17.4756 73.042 18.7706 cv
74.7002 24.3213 76.6456 30.3057 78.0879 35.712 cv
78.9522 35.712 li
80.5391 30.6661 82.7745 25.6221 84.7198 20.6465 cv
86.6651 25.6905 88.8292 30.7374 90.4864 35.712 cv
91.3516 35.712 li
92.001 33.4073 94.2354 26.7725 97.1915 19.2042 cv
97.8389 17.4756 98.2725 16.3213 99.7129 15.8165 cv
98.6319 15.961 97.6944 16.1045 96.6124 16.1045 cv
94.0176 22.8086 92.0723 28.503 91.4952 30.6661 cv
89.4776 25.6221 87.6036 20.5743 85.7999 15.4561 cv
85.1524 15.4561 li
83.4932 20.4288 81.4034 25.4034 79.3858 30.3057 cv
78.0879 25.6905 76.503 20.7901 74.9874 16.1045 cv
73.6192 16.1045 71.3838 15.961 69.9434 15.8165 cv
1 /0 get_csd
sepcs
1 sep
f
111.679 35.3516 mo
109.373 34.5606 li
108.581 34.2686 108.507 34.126 108.507 31.8184 cv
108.435 30.0166 108.364 27.7139 108.364 25.9073 cv
108.364 24.1045 108.435 21.8721 108.507 19.9971 cv
108.507 17.1856 108.581 16.9717 109.158 16.753 cv
111.679 15.8897 li
110.167 16.0323 108.726 16.1045 107.138 16.1045 cv
105.48 16.1045 103.967 16.0323 102.526 15.8897 cv
105.048 16.753 li
105.626 16.9717 105.698 17.1856 105.769 19.9971 cv
105.769 21.8721 105.841 24.1045 105.841 25.9073 cv
105.841 27.7139 105.769 30.0166 105.769 31.8184 cv
105.698 34.126 105.626 34.2686 104.831 34.5606 cv
102.526 35.3516 li
103.894 35.2061 105.626 35.1368 107.138 35.1368 cv
108.507 35.1368 110.238 35.2061 111.679 35.3516 cv
1 /0 get_csd
sepcs
1 sep
f
155.795 35.3516 mo
155.365 35.2061 154.644 34.919 154.498 34.8467 cv
154.425 34.7735 153.923 34.4151 153.781 34.1963 cv
144.263 24.1045 li
152.05 17.3292 li
152.77 16.6104 154.067 16.1045 154.788 15.8165 cv
153.636 15.961 151.905 16.1045 150.823 16.1045 cv
150.823 16.1045 148.443 18.628 147.868 19.2042 cv
141.451 25.044 li
150.749 35.1368 li
152.265 35.1368 154.355 35.2061 155.795 35.3516 cv
1 /0 get_csd
sepcs
1 sep
f
134.822 35.3516 mo
136.19 35.2061 139.361 35.0655 140.875 35.0655 cv
140.803 32.1807 li
140.803 31.9649 140.803 31.6758 140.803 31.3877 cv
140.729 29.585 140.658 27.7139 140.658 25.9073 cv
140.658 24.1045 140.729 22.2315 140.803 20.4288 cv
140.803 19.71 140.803 19.1329 140.803 18.7002 cv
140.875 16.1045 li
139.217 16.1045 136.26 15.961 134.822 15.8165 cv
137.343 16.6807 li
137.918 16.8985 137.994 17.1143 138.064 19.9971 cv
138.064 21.7999 138.136 24.1045 138.136 25.9073 cv
138.136 27.7139 138.064 29.9444 138.064 31.8184 cv
137.994 34.126 137.918 34.2686 137.126 34.5606 cv
134.822 35.3516 li
1 /0 get_csd
sepcs
1 sep
f
48.753 35.3516 mo
46.3741 34.5606 li
43.7803 28.3584 40.8956 21.5831 38.4463 15.2393 cv
37.796 15.2393 li
37.6524 15.5987 37.5079 16.0323 37.292 16.5381 cv
37.292 19.8526 li
37.3643 19.6368 li
40.6807 27.7139 li
37.292 27.7139 li
37.292 28.8624 li
38.5909 28.8624 39.8868 28.9366 41.1124 28.9366 cv
41.9776 31.0245 42.9151 33.046 43.7803 35.1368 cv
45.3643 35.1368 47.167 35.2061 48.753 35.3516 cv
cp
37.292 16.5381 mo
35.0577 21.8721 31.9581 28.6485 29.4346 34.4151 cv
28.9297 34.7022 27.921 35.1368 27.3438 35.3516 cv
28.4991 35.2061 29.6504 35.1368 30.7315 35.1368 cv
31.5977 33.1163 32.5362 30.9542 33.3995 28.9366 cv
34.6983 28.9366 35.9942 28.8624 37.2198 28.8624 cv
37.292 28.8624 37.292 28.8624 37.292 28.8624 cv
37.292 27.7139 li
33.8311 27.7139 li
37.292 19.8526 li
37.292 16.5381 li
1 /0 get_csd
sepcs
1 sep
f
61.9385 25.4766 mo
64.7471 25.044 66.9092 23.6006 66.9092 20.501 cv
66.9092 17.4756 64.3155 15.8165 60.3506 15.8165 cv
60.3506 15.8165 60.3506 15.8165 60.2784 15.8165 cv
60.2784 17.1143 li
62.584 17.3292 64.0264 18.5557 64.0264 20.9327 cv
64.0264 23.5293 62.4405 24.3213 60.2784 24.5401 cv
60.2784 28.5752 li
63.9542 36.0733 71.0909 42.7764 80.462 44.5059 cv
90.5538 46.3799 98.4834 44.1475 105.404 37.9444 cv
99.2042 42.126 90.6983 44.5782 81.8311 42.9942 cv
67.3428 40.4698 61.9385 25.4766 61.9385 25.4766 cv
cp
60.2784 15.8165 mo
58.1866 15.8165 56.4581 16.1045 54.8721 16.1045 cv
53.2139 16.1045 51.7715 15.961 50.6192 15.8165 cv
53.2139 16.6807 li
53.8624 16.8985 53.9346 17.2569 53.9346 20.1417 cv
53.9346 31.3877 li
53.9346 33.6924 53.8624 34.2686 52.9971 34.5606 cv
50.6192 35.3516 li
52.1338 35.2061 54.9444 35.0655 56.5294 35.0655 cv
56.5294 25.6905 li
59.0528 25.7637 li
59.0528 25.7637 59.1241 25.837 59.1241 25.9073 cv
59.4854 26.7725 59.8448 27.7139 60.2784 28.5752 cv
60.2784 24.5401 li
59.7745 24.6094 59.1963 24.6817 58.5489 24.6817 cv
56.5294 24.6817 li
56.5294 17.1143 li
57.3936 17.1143 58.3311 17.1143 59.3409 17.1143 cv
59.7002 17.1143 59.9893 17.1143 60.2784 17.1143 cv
60.2784 15.8165 li
1 /0 get_csd
sepcs
1 sep
f
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (JHR - Mathematics Institute) (University of Warwick)
%%Title: (UW-blue1.eps)
%%CreationDate: 03/04/2003 09:13
%AI9_DataStream
%Gb!T<$'/@^G$b/5s+^g^$m]K8WdW8?!IC:bdujuN`ZAVt&?Y@JW]cF!6nd'2^HQ;43q\pSjb[ItJNPdb]t/?%3Hb$VpVi'N];OEL
%S(lQ8GCTR-'78R1ei#Od9o/&l`JabAoC_fc^Wg2'^1"oH(V>IRn^,n9i">`W$O*+`]t8T:Zb:d7H%1%GI<[`^gYL[MI!5#=kk"`;
%r+<E$^Unu:q7%l/%^Ged)Z9-ao(D^_%K2jVcYp"1:Y4?f]?@8Bp#g8Ok6LpY^7rAlZ[I4S@6K"Hn`H)a:CiM1DrcnIO'WlUq1l/f
%4PPNi2CF!(nhIL6q;NKGDd(!;)g>CB%fUS3-_IVA_+4:8O8f(Mp@Z\Jj8J*"c/%bO@H4-/$d\"*mFt:R@ANhB8+>R$FSjnUe*`>G
%\s]\YYE'cDTSNQYq<BO5&+gEnbfg%]5C%MnJH#;"L]=+Z?G8P@LBBb?ga;,WJH*9(nD5NO+5uO*iW$-1o6,?R\E,;djY4TlBDciM
%?!>*_;QEU+M];-`VY[qS[I__.&@V%F[Qf/Jq;Uu1k4\?5iHnn+QT%u>'hA"Zhq\,;Ck#)dPC$p6l_iS4rf=NIO1`S)T6GbNMnA<B
%m^#V)c^sSXM%Io'kYH*cLWfSHgIECJ]A4,Q/A/sD:L?<!\[_QWMmO,l"^et!hYuL%mqK/$pfKGNdusU\2D)jAi!k7*_FWj58:UCk
%5-(7*$N'?+W:d4gS(BU.TBS*CTu:"c0Ag[9^YW9[_@J?hju4mODC#&V$Q(ld"i%lM2V84`_B\Q^qjZns!oTcrJ'bP5S,$FCs7-"p
%W?*.j[sVr9DQck(hV\m[aa.q8[!W77^:Sa:^Q$"W0CZQN[ldC]pT#t9TJ^O5N8`^<[g.A'Hu"31h>QI.%J1(,n;k&fQZ'=aS(@^Y
%r5T'2"(CP)F*rE*kC`eXE.37bG(+adEdiCbFPb?uGs*hDq)k4go5O-Dh:_VWg"GWCak?4;d9/\LBD&?rjg0%Ecbc)7F/S3!B;_Z*
%-`>"_8#Q<m*Lt^0EgfeQBflj&rm[L/T:DIBSt);jT,aEoPBKi"b"4cg-h/IPp_.k!IXH<dH@0a\I!g%kO5"Y;0$!cI*QR2Zm#Tu=
%dJ;2CdHT'#dIGW3;*Secor&klUN@32_N@''rOecqdsf`+qbcgqp"E'b4n[GppYE7KG1KFC8NUf[Xg`K#C+CmFe7&g$@pM7$BD&X'
%eDkjSHYp1A;KGPiekgd;jh.+KdrJ?Hb>IN#Q!-f%-'_S!n\lO0o6cj"o1;-k7rYD1Y.8(NmlBNlI<Oj;SYaeWP)e!glD^VK9$/TZ
%QpUAc`Ue<i:ZG#/N^p@pFqAF?0uju<%+.Q]cGNdE%4C*o*/,G;W1eka;MZJ!+.PRiBE$DQpg\g7]5PF[ij2EEq>dG/*B;\B#CGEi
%*A!S13P49Y?k3$V*_tu"3,k?'YE&(&-Le6N3,ah=D[p*d1<B"'J`hNB?cTq?\)UDa9H\)Hb5k^+roB98+n38.J^2"QIs_*5#6O8@
%hr!;hE(g5`I!5#,T1'ate&RqR^P)3_q9?aRhqS5/h.dV4q<C6@oO$Np?QZ3`q#/%ija[+=rpdb]0E2I-&"Bs%@e8c4Egpi0s7Gsb
%Ei;3.++3qU&dGi@mD7p`GV/iC)Bd7;%e#$kI!N7)[^2er]_qK]V^*Dql/CP<qXSA`nX"lh:B!=mh&#_H5LQ1=a$6QVci3_2+rc"+
%lbRWVSpP`F-E-P2fBh>t9Z:o&Zh:'tIg_Zha$5"Dj-suUG1b&h&f<[`"96oB[oY5,:W/CaT&+pFqq^)E7n;0ThekA+;&%gCIKc5;
%q#0@MrorD=bocBAFrtYR#4`H%Jj8*Vg=ALc%VYagrQgN'VS9gUU@Gq#kOkb#qg4q0ff,F+mWLN3U#(6JF7m9!]]]%ZY+L%6B3tr(
%q0kF&TRW"%s7;.7<-%U"B!-\Nk2/Bk&[5-EmHsSak_B*ta)l=m:;NRk%*f/-qIXLL4hH-Oh;,b%P8q[*mIfT`0(7]s<4=iumr!$H
%@0=8i\p<)VD7Fra(<r)g2rB6W"n8ja5BCf)OK5O1HMMdldc4:)2m?]ff?G&9Yflncq;6\uio3VX6KoR6rT@s1$V^Jf8*KmDk+f]*
%g"euI:[eloF?ToSro2K*It)[QH]eS]oBGH-cK460+5b5ET,uhG?bUF]Dmk^nf.c^oo)\X$D#j#Wmr'hnh4[jBn7rlZJ+sl[4]gUO
%Zd%%p2nSDQmB*bK,?rV.pu)+q[ni&Ed,32G^Ni#0cQ4]9'u;-bn%>p?GY7:XnX0muo:u>+qs`m.HiUq[M8j/OiSShuF:QX+K7<U^
%h(P6=d,DmGF`KHshu"+-r#;U8jppJK,q[2nf';!/no"81hbr-14=>m>h:5l@f,pUAmG7/*XhoSGgiW2g2lY_B_$b_:LZK=)dQ7,X
%msb$BPCO1US#cQB`#h_7S%GTqX"??JJ!G*/U\PE1EHpt;rH`h$qt6'IqfpnW+.UR]6i=N-oAf^[o>AiGj7aXe;9js)VuA39OUV6b
%XM3TK]`.oJl?:=*5/m(CS!=K_q6[lLHN`a*@f+t+HgX,2DjsO`_7KZs9^VWYIO2987+;1rUA!J>hY\<%hY80(.65F"lZ_uHhd##&
%IX?9aJ%`CeOJC^gX6TAoQETbd3i!:prH;uu7KD.<2[sg.+)GWqnA2Qj4qk9KS#t1o^H^R^hEJTcKVcH[&RK[&]m7-`([9!)TuMh*
%0j"ZF^3SFp4'UdFF3<":d8s,)DkA(0?XGuZDXVNCKd42coVam$H01%P_tP6t@\4]`,@F8%V5eUJIX?.G2u:_Rc,1Upk47Ia14d9+
%hd0VbQ2Kk;c-b##h&)K]/5B9tcF_>F*)2*/\YjVC]\?aU_Ie1B\\#MfHG59[,BlqE]:7RBk&L:Ma'[EgiUQp801u$=-Q6@ZDVi6B
%UZ:@;5\[DVPlC:1^V/MgD"$7u2g=`!pM\G>36i9jc.1YKp%J7X2JbSUo'UMnfirL-]pmhpDJj/VG7WcBPcja&TCJ<!(Q"j<rST10
%Qq&\r"5^G(4IhOqo7k.lDKG@8_+27e]",g\]=;G/q=l";rl<>\@7m<ZDg@I!\.69$XQ+YMi&4(B;u5J2@`D;Z0M<,>IDbY5/f5f1
%T,er[`TZbD(`p)5jaYDIT&@AuH_U#_0*iBmdR[P^r\0R92BdV5fim:GYuj/2e]!M6b$g)Y',#^dJ:N+#Wo%(/F#!>S=K7Wj,p,5m
%+XKoT`=</n6(_r#GJ\b!"^6UImpfn(\3NT(FTV=T5W,FP7]:)8&n!I&id.a'gqZgN<q$>=5#r^i8/'oYk2^@u#K)kL8O%b#*[cQ#
%\\hTk=^09M7Sg;`_cgi_Y=#CUi7D#KFW".P@1V>M/JtSj+jotn:5!`$Er90Zh63rlYBEuTi*MMMGO@/<<9t(sU6?0=E/-0X\C(^l
%e7]DX!e]VL&Ag77`Gh2[$(D;>FusLm<5rs]K)('K6AXT`UQO1i*#:q?op(V2"9h?cV9ooT=?:`Q`>kgV`kd>l%snW<;apiuOk+'b
%!HYY'L4_c;ePZ[Pbst641^H;NKGN0?AB[qI53+k;]P^!J_)B^AH>GG-edF]C4NmefhI(bCHEgGlCi_&rA4itHjLX#U&VQdW*L\X`
%\oW^T_Mt37D`'>6'9BI?VN*#.Ys@?&c0A#p',#@O2$:WW`kUV!TF6>Y^/lH\HIYm(RK,qWg4<X-M>t/o)@3Hq6,kr;==MX=ml4$F
%nOQ0d+LG#DgqYCO*YO(sLIeCI&/Pbl1Br":Cb%b;i>o'r!7/U4JBIO6=+iDGW3T7%6p;`eH[;i>U/j5[8C>N2MXtDNQRfuBkIGmk
%(Np&@*W4_8;$80U%&'Q,aGbu?q43<_EBrHE]^Ps?Ec6\:!"qRT2B2m^P'gF-N^pR12pBA[-F,'0!:eod1jlAY#qrE4'>DaI_]gQd
%(6#a_p6;*[&MsPo@k0BDQmmA4=aYh3LL>H17$g?=#%0h+9.NM+B(gnuU?D2t&U#kH[8lqS$Dkb"kkki9Wt:&rPD+V?\X_:5"K_@%
%[_ci6].lk#^9>-R7kCNLpG`H]R<4OXC_gadXMnR]C*8/s"u6A&`&dAI`?(<PO!/$78hCJH?71>[V$i&Xm"-qE$%3GKgn_,Yg)bi5
%i4]>XTjCi;#f;-$=UAU-,1202"Y9scM:h2<NDd0Bljf.Z/N\O3g1S$)%]!7qG#+[u%(l+]Q*T#?Q%aeu1?cqk9\4g5\Bm)A^oPJN
%aqs7c,X/."eWiE0]a>>>NF'ZOq:t@OF"!;S>n:IIe`ZRQ:#q.Jjn(8g7M\hFE^HLL[XG$+8@,A?O80R7g'T[F@Wa=@[``[@]c(ka
%C,mRa<<tsJTE2$F4]6!oOq*'^a<8'F)"hZPYT&uVN^>/+5\8h(89^UP;c@-K'N3DOJk-m0<b^X"Ys)3(j,QG>g""GN_p:%V7SK]"
%$]I?o\5/ceKN]aTO&c2Fd]+V>)H1i;lldd;jZ1=)CVGIpJji4hZCsJ3M=<3e`b$`t_kFpqYo:kW.GD.;U*&4LC!D*P(I574YVo*>
%];AG$ABo&.BEbUf0EKBI+VJj'ee3a7HsKs%&d#Wn!4_=S\oVOk,]3an*](`,VZgeMPI:OOXpPUdTd]B!e79,a35\mGXt+"9QUFY(
%0351DR5/TjJ/m;pbaf<-*@_0t'A4OlJfhA:KKHXK%:N$@aT3=,R#XU[b)#8EbISg\FRePpT`E=`RKJ5;fTiaY"(9%5iOojY5Ben)
%K'a9(4U93M\@.8`[TKKK,"c>I)jCUkq;a-8_>p<g.o!(I1L$hBUh=0c:%S8kc"aU_j_K#A9X+0%^+:dU0Wi-Zb')D>0pAp\00rY$
%0U<$,SFX7Y0S\<Ag'U5e1RjO<F46>O3sTN*)S1<H:j)K.R0/*lG8D/o6;]=^;NjD"ieF>UA9m_e(#Pti_&m,Us(MDO5bh,5n9YaE
%!g1;B'RMW8$qSI=)_)=-Skgjm!N_DN5o2)F'%)V?;a>A\/*fMqcHKsdZ=SS&ODQ&#dK9,/?B@H+q"E)26<,]Omn0mf^m;$Hg:@Qo
%W]Wj4i*qCRg*B]`/.chZ+pjl6F,24Q&XWYE3u8IdaF]Y@jfs]clEK7[Br#pF`Cpu"8<Eob_U#W]o%H_0aRh;$*"tOqG*5mmHHK]U
%dY8C/4.GDS19(>uUWI>@3+7+C49CoY/ui^g?obQq>uAWg,gmHa?&]4\N\CM/.9Sa]L>;k1^u&1gV)TMpXS^:qbZtnpf4"T1,U%'P
%ZucsZl.dc^b(GXf`+RrPaL3]&XccKfB\9q-:C\pNNo"^W5X9\['>`k]pM!j:(KGfh&^c@=#%p+%e%=7bpga@k1*2NVHT"5fKY,*Z
%3OT[HYE=<R+A)6<kZa?%&CX#iaBg4Ao+4Je3a&((W@@*$*iKXII3MF;#jT<\1iEpK*BGg]'pB+OW8Fb6MrQh:9!!1&*=jS"lo4.G
%;`/5@1d5*,S,gZ+:@LM^ig/d.Mb&X36G=4=Jgfb8+[U:19P`+7=9nu)Y<WL>=uN,XYQ-bO&0V!,RN]Dg6W(kPK'-th438HOSQ;IY
%WS&'6NBpm(XpbIE6^,Q:@;:]lp6H7_hR:t-;IY#(U+Bnadh&,gqF$%+6U>;mG#L^64I^jEKtNtgMJ@8i>lq\UnT?*I8E;oS#gZVu
%^hAEO?M,h3eXF]*$msgMpJ(o,Z.U8&UQuouC??,:b^:!2f&.E=cJtT`j-ZD-GZg%-'^Z"]a2g5G=q(VYKK[8dDI@!&;"$8E=2c-l
%\c]9::/;Q(JA3L6?t!T.7'9HWGQV,92tq,'%XlRO3!"ct26MNST5?*EiPPs%P.nA:JhjDMPf8&9Lt^tW.p*@&(0HO/"[e1cIK4a;
%Z52aX5YQBLZl2$Oh?"Pi>Yjl*TP>3qHIuGP85flUI/nspf4FHgU$enh?m=kfR#%9)PNQ\Td3'YT%1ruB5n7RAO;;76&s89>eK>HE
%.aLWq!g6CZ:(8sj*i7C0,LAnQBki_aM6h"HLObI:`@-fJQ*T#=KObcf$]"jE+B9Nrd&7>QLA36XYc%U0ULqR%C]t#u2^V?PX)<_(
%_%EI#T4q6O[qU/fbQjJY<Ml7^<JY?,og$aN/B7::T";E1(dq7tlT-6GjKQ)Pd,N]=!l(P>DH`GH<V)5TAR5F<B-OYD&/H/bLndCk
%O:3>OVTABQ9W2sTnA8W<('.PcNmg)-?tiIpi(O!7-X?>?7:]gLXAtQsE>\l,aH<5'51c\_PZoF=B"g8"1GVfq15?l(r]lT738JQQ
%L$][uZm-dR$4L=Z&N<6jm=V&&Wgnlt@R+G*/Ag_08.^,J(*0(\7&,Ap`\\0;;U0"M(h_;cBdH(G+<bGn=ofmp^DbYEZ/2dnK%Ur-
%RgUDS4>E[R7+aWRZ[hLKI"(uudm,*9nt6@.3t;0`HE&uq#kb#')@"U#3Dtrd$2Z4%I+A=lVB5)k'eg:W&C3ORi-MI9]W>2LXs7<t
%oX,FUp'$"sUikFB'\$p:h?cH9ReqIh&Q*=n;G!W7&kbh!)<AfY4IQorXn'><(t=R.JjR+`kW-.gjNg8+8PFejc:S^p+;,#ND;ihF
%NmK'^VrH)TjBGOcO!Yk):>5/M<AbL8EG3q-Mp/Juq0M4[+GM7b0S0cGXI!<,o_LpN-dQA$&Z5qIgp/>MkfnHAR(bRj]E*S\_&nOd
%Ut"$L-0>9P7]V)k#:HMSMEaM77Q"?)88U#PKV'c1#U<d96.B4:MQ'$D$!K#\Q*@1QXjVnJ:pjAi/sm)NfqqaQC<e_($V9X?.!5Al
%FO@+?8J^.S"PR[5CHO#=JtMa?"c^@'f4@6iIKl!9!(>jhZ;O+?afMBX_e:nO]<X63Uf-IVJR%J/'!>&(`#61_"p/PG#*CN`?!J-e
%90rAo@579i&Y^`\L!^M&lBdc`&]DUnD-EdsNUD<f##h.>#Th*g8[9T.,2kg5#8nr")>5t"Vm5;#7*Unp5e8>7jFehLfUR[2,+/j1
%.PbR-_nkL[0K*iS7Mh"t&;V#.6ioH9J?be.Q?&@Aho73.bATa]!Kc-S7PjkC(1*I4)sp:n.#o*Kk2kJh+,S*aqF7qD)fease!(t8
%C638=6DqG<Plj8[d>0<',`np@&i2)f%2bno[In+0,Ib&m#H$[W#;YFQ&Xn!.`.GNXW(*sW+(%f6_DY$"X[&t:%3fD+/iftgABZE9
%-=P+@,+*U@\lb)k]-R$c&9.P"le!Ge@R)-"652GYLb*Bh_pYpOogdkiJS3[n%2>l05ggli+e!$E,sMr*aCCN^'K*`P'#"-u\u60G
%qs#^X8K+tY)DHl)b_ZH["kF)nc83:GKMHM"8hin&'2uef,&04Uo\G9[)%\OXS8!c\d_3m9.;6DPFflKs5moJO]=3#p;\Rn:I`B-f
%\K[mgMR-<d2K@4jb01Z\a97WiNB_q_^q=:e&&:.6Cpq2WX3Fp8+@MEk^oP=5m:_d^9Z5kLEn?-,HlZV/lno^7Zn,`(6tU'd?3<SP
%98D+*OX8n?T:8E]g+$gV&+<.\4/T(s>e.1FD=0,&D+S.:UhMHK&dr0V)N#G`'&<P"lGA(+?),Kf1C_."-j$q1mKS?=2/:,VOI'?G
%JgO8+fLRp9An530'p;qVRr"O)Dk1s2D&]tJoG/"OIm@`fN(ofN\T@8o12S>=d:a)`ErSG!;aMlIO![K^ZPTgMN;5*Af_K>fZ&<o:
%H6REB$V&UcT)')H6R9(D/0g1K`jJ[nGS9BJ!94!F63:;Q`cBb*6,\]6@"SZOgLBdbDDu7M,"uU4,E?0t1KJ8D/8S@(m$itOc$r(t
%#N1>L\mdRH@B1hSJni8@ou<_f@_sf]^dda)`-DtN18RiV=V9U$(*bE'&2,af-@:-4P@1b\4cX8O-ikTPoE.OpMlU*d84U)t#_OI4
%D;(3X;>QZI;A&W/W$ga+P9/oR7P"*I#NKM#J<Nq[m/t:0Whp4en7O[._<\+Y!@A+HVH"I1=<=nJ3E\LK&0cNj6FHo55^[T&#Jh":
%Z7I<eXDnErR)>K5^bX51'":jSY>Z$ej-9mhW\%%DPS]LGUPT7LA7A0$-goV=Lmuo8Rt-fOj&6%^?kH[)h$==WU30uk@tkI;,AU'g
%Es`7![0oR-+i<Xt[E2'Cd5rrSdR:P]NLE>0L4!l$E>rU@"Vt#beY*p#KLj4hSB_=E!@d:l`p///O<nL77`g"HPmVgZepjm6,kt>"
%Cbb96;GS./bmRA?)6\K;d_>6GMobsOEU7^%9H*'LMtKp`b^fDAhuSX\kmIZs/"=?Z5[XFlWDqtYk%.OJ:2R$\O'!UUah)(q(1DJB
%DJP17W^[ik.b9$N<2s82:k=.?DNHH.3ji9_5dSjg8C"O84maI,E46Z+*UI$!Pg;aH<L!Tt)qE'bo8N&UO\kA&TM"ie5XWatKLHIs
%S2i@c'gbdM.-i[>Li6@m=j(4uO,ss6J5siVU'1XLC^.dYau&o!4+b$4oafM$idD$KfIWbeI:.[rU.9,nHGgDK][@Ng`]4u=5t!i\
%b-e8sU/'!?-,):ki&rK$.)2Gd4rHoo:B;5PZ)0N(F$u7Gdi<:d9u92tW'I"HGJff?KPWW]"q_S7RY6;qheOM7A3-08"M,tXSf$fb
%j"-FHK7IiWSr_!\1^+-)9r?l?_3m*I.6*,p^#;@.3/Bt@Y.!7D23Vsr:W^bI2S>0@Jn#Be_6FiThuGM8)5lC8U1C5P34O*"+q0un
%e""R-9u3fregW.:F)V,CCL?,o1`uj.lRWMG)%eW8$%S!PfkBK*`%3nRB0jJ=)q`BN=WfmGQqK&_/C((06SLM[3)FXRbZ8"&S/A%,
%-[j0!H#:DY34Nup&q27\!LME]GgsPn2IY\)i'n<f(tgd&BYK8UH/l9a<_PS"#A6=J#KL;DK4B8+*#o+2Q``>.KBPc7cCh(tK4>M<
%_6Fj?i)kZ=CN'SHY8`s`K54QSg5%c1aMG-;-K/'cZZ%J4BfLqDaS(;LiO!UN6PFJ+Ft0,bjL7"'3#/DY;Z<)b<.(kpMfO[a&m1;+
%ejQ#oj0mJ\<V@amLbP9Sbs\(Y%<JG8<"u^aAs8X=K>V_MonnP=M4QkMRS\XCF)m%/'63/#crRYQ8R`V@8K*"Roao6Jb68>M`+d6?
%`JHQKNCoBUe'ujC5q3#3\BHqY"qc`,Rr"UL[S83ZPsIAKa!0Pd#30M>m(LQD?M:rej*[&$*#q!7W^ft3&5!^hj)#EIGS=hL-:%kK
%(RP#;6O"Lef+?H?Q.)NX<mj:pQ^3T*McGI9Q=paPj#.KP#n*ISY//cd2,p%'ej?1eoGi<tm.tBQG+G12[ER_Hh\W:q)F@rk(Esb_
%j'=q3/BEp;-Vi2fSR3%-n(0s>0$_2RBXGl^`;)-qaT2ifdNYbe,#[3ZB7Z.NiF.!;Ls+1Pl=jB6RZ'/Xo":bjg*?Z46s)uU"=,<o
%a@2RdCac17C1t,Y9eM68P7pl3&ps2-7g_`tlKT_sXO@W[frAuu``*@t)SupPo9qB3O!a(&='#It;IS.'g#K2KmaGk"btKUd5i&5.
%UQlA9FXN2u<+U"t!Q[:*=-IM308O8/1*O=!KBbrK\,&2d7.2e2/2@B4nV1OK8VS<!BuR@9?9GO9mc>dCaD;.@F('eK.0PFI\8t3`
%$6llME0DOR5;tP:+1@2l53MYOAI<`S!=No;pENSJolXJ,RDOOflTiDS[9R/o4gHlZ18,cOSP$aaLik@B?h6if)oIr2#k<"&+'/J+
%,.tpl9#q5N9G!#_ab&NpimpY`+:q`lnY"rp5*_(NhgqSV?NXLt(-.4F2&@Dub,7Uc%i&\@8U-M@&I9P,8.g4ZfGBfJ:poA90Qt3*
%<<WrFl[um7,B#ki$jKWN?t.:@-DIRQOgYI[E*,<YL]ScBa)#_OVEP(!T)f$/`SQImVf^8s+MI2?)O9c,Q6$X[h$OpU.&AL4M*",t
%6nl=4#[1TS?,Lc=CoIbE:fKL9Sq'J56knlH(tWT"b\_Nf,n\>70$ep2d7P'epk2a7-T<2O!TickPqq7@YtLKBFl,"oH@fs*()CSm
%Y"\d\2Rpt%WXqJD"9Ck>6OjTP)T\S^JP=J&00`=@qTYucg!2_Xbt?^'Og\m4$&=-";5-54I?n]c-CKpF:^/3G'mU`29^o/YKZRu!
%h9ftj)Ck<!j:n81Q8ns-*d%2!53eqKNbUDgoMQs/FiA'M'D#Jm"5h^g\3nq@L1D8rQj?K+>12,>":Ecb4cXOsO0rqa,484R3-9^O
%.'<i13)8>:2,bT;\9/hV8h3E)47!DbK+V%j%3\0A!)ChH8BrCf#)6ZUW);Yll>R(NVW]-8!f&U(8FU+Hb1-QnT1MS6OsYo"+)%$:
%FEp4J\]0rKD5I'_%:-.F;PV<6K5no07:=(Y+e:6(U4j34$.<6_R[-??7\jd%-8HYUf"#M:+S]3*%%5cUbtqa<cEC0>:oOJC8<M&T
%7-m>L)-%.\j1D7S%U$]7O*2U:?]B3+$Q?Lq!=Yh/hRjmX*QN/#Ma9H2F>i_;(>&dNk<%+_YS^.)INgQ)-rJUDC0WBh?iWr?QD[#Y
%S#=KiIV==hFM/DacDcgnH8@a6IP,]K_R.JJ_X.3p</h@*EOO/ASXC9MJEc)M:a%p4G>3MYclMHh%?T#A']I)qPNPCcR2GRLnM`f,
%&h-i1OTh_(3r[>1@G&j]&lN$C%cGcMLc8eELR,]5UR>77<]0Fd)":c<W2!KrQ<'a5c62C?bj5Ogei!$AN`MfcIS$eCHCrYZlFlDd
%#VIp*c0-Iai0DH-;D\H?0$/jj@35l=UuE7"2@d+\DNLM+/O?foTf`<MFri),=?A$$Rh"1-P-D272*:tdBi7o<Bnk(mSpE8=/u\bb
%_T!Msac%PhiYd:g1`;1)3+9cF;4h-^qDkMWLiD)(<#Q>.>6Cm/+B!hDE.S?UcA[oQ=L/l#Li?KDeTM]r<2(,FK1.q;$5BI?1kJhg
%9#f1SbfI06PIF.[R8X*E_M;5mm8[?K%7f/KJpmB)I9U/ng<qGRZ+rof>7mEs_.4#'?IC@;c]tf=As.IR[M@u>c[Cp45eD:Y(+n?[
%EKY?\P73N]6Wo6Lmf;H[8STB#l39"aM%$9'6k`IZab#VpKTM@5r/I@[o82U71pMWZ4;&o!HqXo*&gCk4>^91p+`m+La+U[11Pua;
%q"jKIX9a^fK8IWZm\`Z')F;rD8*n2k)OkT.$:P(l;B6728^F/kP5O[Dn9phg<J:N&9<5oQp+bc^R&O5I(BD-rD-9IrnsZ%:@qb1+
%QC6Y]N$k^WCPWceWC]?87DuD%Z5WPSLs9Xm<2h.HM.m_:@`qDfgW=Ms3YgH:POcK1D'u3657p$uM"J:.j$G:G&*AM!8@R^t,'$%c
%*a-9J`]G2VWa&s?,p<neHBe1AqMR[H>OhAqjYR0<G%;cUI8jY#=Y>RbdsID'rNP@=QB.51;6OkrStbS;iO+IfHeT5HrhT&M.I:>$
%^urQci&+]_!cQ"o(IY060Nj$IBH>^sn"ii156]X:?E8'g5W0o\]"d(333P9ar^QT8)&e;eX>21M8pQ"[:BMIk2iu-t#8TgH_X+s<
%-?7Q56nE"?WQ_F2,[!0#btg_sn69XVAh$=eq)PJ37gNBcd@-\\ppK63@`!)[jsM>*f)-eHD^UR6T83g60WbtWaAPWN7E4Wt6o@2C
%:fX\9TZ0GlfD6Cjb7ZPD?_^0uKW+d;$k]fs_d"?Yb'B":I:R3S51#1J`&01CM--pL>8h1B?5)RWT*(L,QR@;ZZ":#X"X1:@X0((8
%SJ=kM5T:#lOk2';>f+Lb8#oLRPiltJIE!`SN4]UQA?E!PkqErB.XiuefdDHomSXa]#-QLV\DAT!<6AT_U]k9`i;r-!q.eb7pdnRl
%$[r_c$3Ws?"NJ-3biG:F^mup9HY(jC4]M;f_2+$]V`1%70A]e>/-_3^#`SYVjEa+F9;A34MEFcskiE\A0nZ;.LI<W$`*+&K8Q/9$
%mI<1a-)/fP_XLa+lgnk\2L5k.lnU(8H@CnA&5@(/A>Jb#jRs]R93m-BK_`;ND(0_;,"3PfUYM-p-F4$hBdJT--.YFNFLFdV,0YnO
%+2#mkQMaZbUl^lh3E5l*X<kfa0'6HTjDli\'d/r9`#T:PVmRWi%LDRW.S[`T4f4JYAV?L&0.ZM!5*r(6/dU:djMqIjPsVi&aurqb
%(341OaO[3E']pV`obG`)#tPP^1oVlTNn')BAu]CG:adfg']ZcLH9+EZ$C+I$5Ol;.q+Rfc+jdm_8<ZZQ+;1;NYj1>\d8?YJaYVUr
%/7kEpgs#)(PV"8h-PiYFOD?OMJS.J_s5A+R7Q("P*c73b7\O[;"6<ignq81pDpN6p+mmrWPm]\IAT\cldRKI"@7EBk1H16>!`\hI
%l&hNTS*(]n8SKOEBJjk,'D5<ul@1?^-HEY$_bpl2Bb2SqPL`.c<&3lU-/"`Lr&5l\3lspWGR"NU0n^i-LT/]L\_g)COp1CRrde%n
%^c%Q>IkOi]SBD;WWYcq&c]s+DB/G$keN-+p@V92Y+UtWSJk20:jG#7eOlT);'N3@cK5mCM;R%d\Xh9B^=g>AjWkSq]r$&>Pqrr5r
%l!th^$]E[f9"D1Z&Ko@7pqJ#X=-C6r9HpV7jaCR@F?fApS8::u&\=Sn[JL-Tko!/1!Aadogl[\%=&TFG;!kqT7,#0)bo7<Q*Q`,)
%PR8UUPN0$0KFm.LbS6f^%&,M5&=u1D4AXh/=r=XL9/1NCl:D?e[3Gi<LoQjiXIpo_'/T!+bZhpg.ia&UT"'B^pakZPS1$B;RlLN\
%TkMtiKdBdpMIE@Z#m9h9e-6[/3C^!?d_-[proC4-E/;9iTE[2-/"F'"4?UH#MH]j)o:8X/9_gS#]T[ni'_^%&[rRmO?pmqI%k#`2
%FJcL`3\E]N1811e!%9iPH+bRNGNuFP/lO]a]g''.-1hDiBiY>rFJK3PItpJF-%^qf[,Nu0-q$uX'bO7t9Sl_:@ag2iih`=]#[s$n
%6,;5Z`X'(^YE\!EeJ&_W<e)H"*,%dZ!AuTsG)16EZA/YB_^_Fd-pk7c6ofCRfAmd)IORR7:`_R3Ytaqh(6JTF.38mnj`!1c:I\VZ
%CL[m2XjtB+`2i-*ms^A;R)AhE"=:/p,52:2AijEoC-*WYW@LbkRKuEr$mr#J4cLWf7)Xn[k*kISEr/8t9,qT.WfX;T,#[L.%2/Cj
%o2F>&8<gDHAB*T6<4sSH\a9Oi]eS!U8NmnE^]eF^Mut9SQaT0P7S7MF7%G8fjg&m+94AHeG1Xk/%^sdS!kGn*1WLJt8iSH!-g-)c
%Wn"W@1gtp6(aF&ea9fq90fB,;/&mX4:)5*K8-=[:SmGO8cX*-gR\5*q(ir]r&BVYO'qq(%6#Md(=/1WUA^07%8cB/(1MPr!Wi>Z]
%AMnh"KQInB[,aNm7"TAqb=lHEbp0(B[MjG_UiWUC-aGBBjn(+;-[ABL>Vm)H$.D9R8n9j_QV(9d6K,XiHH6)7>?cBsEZLZ8!Ig!.
%X4]t*hUe,-=(IhAqU"ID!?jbcQ?dY&#%&Y=OKdr.\r=^(>=Wl>d56>(TMKG.j<Gp?aZqkINu9BUWK%N5hl:68[FHC+b%!A$j#l^_
%lphPT_:7F(&QP9=%-fBFqE[dgW)s'nI:d9"P*T+&)c[@u60S'B=Q.G@mh6au<7UP>F[W;^$76s#^5S=RMl<Ye@&+\c&f4Of8)VQg
%YCLd?/rjk7>UA(mk`B@F'd!Kq[SieYHYRo,Qn1;[Cn"ISe5[VkHpM:l(?8Ckc!W(:!okLBZCEn-[_t?Ck"TS*"ko>#dOs_V;/%;4
%)Xo)OOh<OWU!9<,K3X-822GuiKCB(#'%rjj?D<8UnXseaqKVV0IlMZso=6$Bp?6`E0;&B/Man=DOpZgf8>?BORP&E2$^O(.T[.t,
%<7H>j5ilB/)rZ0q"#*V+dFKSl`)huMPPIP&[j'h.V=L7RPn0$9M,B@rK0c#P=ZJkoQlf(:Z5GfRhTN/m6^0M@0n=7?VNm)Z&^%r7
%\ErFen@`OZo7G@$#f2SmGksU/:(mrZZ'S"Q@gq$scEm7qhmEi/5pFppiRO_()to<YATtqU3cG0@!gRLFrtkqt&1N1cC4X.X1(\VV
%dWMkK$;9hdJcgK$Y*B0ilqZT^*+SbHJjLV!a`0U-aC;RJ#@dmE;j/jLO#BT-JbYM-QGd-!1([+E%u68j>pO=aC`6RhpLp*4bg;<5
%;-'+)-il9tno4&>+Ser]..VcEd+9"\RZ=\RBae,6MnXh!QYpmRoHca`ckn##nd1Yu,rAk:f.h^s%*u6f'_t<15?Imj`=Q.GG]YMN
%g[QY%kS%)OE2=<KRRa(5c@rusKXVmt%IpB=(]Bp<f=Q'g27>ngMD8l0LqWrl56KXIIMi2p*U<aZ+aCOW25le?lscDkT\-bRYGYo#
%iXStG;.k`KkrPM(>C"879urGuleEk89(#+Yrd^'76&drrFhl@4`="<>'ih*lN'UVhr,+ujg0L(ZJPIme\1XAU,u1t-%t#uWEb[G[
%0`F\$SJ:ckdINks%&OpQKa[#(qi;S\c&k4Pii%)+oM4:u8Ap6Zmgqh$D3qP,F0FdpFd[G1;@]I#c]ad%e!_)17:e/_m@KpQ[*%X1
%4B79,k6!4ZaH;bZ5t)SVRE#C1%YU;2;1p:YnYg\?OOSF-X+kQ:n\?mn(d/hYUF&hNomkQ9p%'bX<d)DbiiH-4Z]=WCQah_knW(%#
%o%b:IL0sF;TBB>KVA9'L!Ps_,/DOuqJ9f`C@q_%M3"JR3E`M.MF=_-\:(),.HI`OiQ,8bp;IIKNkub/4XXBo[H/N[/HBo'UNYBk"
%/S't_H@\A%fgItHX`O$9GsY]plk4A)>*6ZCF#c)[C)i<N,mi$?OG7PA_K%o1"J<a1^fuK19#pbC$3XlqcL[`o0Xn&Oaj(jg"7)>9
%_._th<FVJLOMn^!h,q1"#6BlU``%dO`B>Qci=2XYd#a#.gs)W_''qeROq5,sO:k*s%KqK1Pc,+%<%8!'[[0HgD%)W(aAAI!eU+J(
%lTCloOnX7ND8$MQ[`7k!M.QD4cYQ3:[$1nd<h$+'=*#6m\R9>p``c$\90!=$ihFq7?"HXq,IM*#7E3SO"]&=\-\Ycm4^f*VH.2D.
%r"s&il)8P,;-<*'HP@5ZkGJo-]*\WZCDAkehlQ!+bc21im#C]q[Vl.XO(D.B&nKpT=os1'b\16k'aF'aPWb'30tJ72o]=/iel<fJ
%fm(uGEl*b!BqNu@"Ct)?Z6t0;@2A`VQEVh3:Vh94`p#5n,#n)f%<T2*J/DEZjP@XO,=Lb"ZOn;W<0=B*1X>Mgh4>WiL7D=9hd;8>
%m\,p1.BUW`ePgK%:pI5jD<Th)D%VEQb'@cYOPSTIi>?+b\Wr0:PbiJma!-oXT0k]ckW\IVbt]"%:jp6NPWQ</6go(TGWoMsRp@8:
%#DOSM.dug0m1;;\eJQ[SMNKRYb\*nIHsjX[bU4AIh9$Q?`ru0PV:\/I'nXQ:c%8bXYQZ33:V-+;2X$GC,4#gYk@Z"1PYFitiog[^
%PV?Q$hl#JO%NT[KbagIZinTCpTn"a[8'<SEG"8eX:(SH#+/=4UG*%M4]-S^RnkU-<@^]ZGW3Z,/%%!@';2YFB'+"*jfF3h0R!`?D
%&Pf'glS9$XH35+%X?@a(,$3Sg-BjTY9cg.kSid?,7lRrZ<VVOHaJ87C\)UBFoIWFt.7jZn#Z%HF:Dtfs7ahegg_6^EM90@/e0S`&
%RYS):%Wt5%Z8jJ;fT%Y`\d$d>:3*1O8/M+\6f]7""5@4G,@*CJpq$n*rB*-;3&&osFa82ng%Ss4o2'^G>f9`!repi?)<G&^k@p]?
%:Krr3qEP%Y?/l1UZ/@^oYGWe^F*sI%/>;%u=MnFSZsY=/:(8(GiV=7O;=JCUnDbN+p`N]l68MJ8Yk&hjIf`&VT+,Zj7N?aIM!$_;
%++g1O`uGnaN#6@hUEBpVX(0J\U1Yt`#F"<hH_g#0l2I$Z:FPH0a16Fe&dE1:rg6u%ZpL:l>7nia*kR]5(muRLn(HmeaH&PO+^QYX
%]oQo/.U;_be9/QqUQjhu3\q\SBY4MZpT!cgMnoSUVaN]EDb;MQ>!Xcsg-jKs<k)-?$1YHgX13G7p$iGXUeo#97G]%%9_dG(#2W!j
%;g;5@:GN%"K,CTlaI.*l0G40(B9[G></4u9NoO^GXkCYEng5\*cJ!9Sd$U64-l7JohF^c3j:6R>*,kN[6PDoWX]+V"O1(.6)kuCk
%om"TEZ8#Wm9?*`(a&+lSe>Pc"BO&bgl1-bG*;/_4(LnYH^_$R8ARe9(Gc[0\5<dur+7[95>BlfoS0`MrDGQM#1CQ>N"%dUne/1iO
%7I`;f7]Y&#I`AUX0Kee$8e'f8Q$lcFR]?XllpHG!"/:C-h_R"nqH:5[4%$#Blm>2n9J447SIY`iA[,7s<$b]PC?-&RL'#;WZVV@=
%(u:!_I!bC,HEGCCfJ#L/=BZ.G1#KQM*,Gg1;EY8COJ%%mX]em*!kHHt8sCP_VqcupKu/%eM4^QJCOt>5jff<4H[o8jr<-6b_pH[o
%p8k.Uf&<>93D7'QM%mMVX9]?$cgPOHV')0p<n;6_*_LksUR6PC3'MS,oQbn.G'eXWq;_2JP>;Zp]Qe_tHM`KpbF@>]ro!Iejh'pB
%o(MeFna^\s(4OrL^>D+:hVE*/&)Z:CJ-\93c!S+Cqs++;Ifi4m]1i~>
%AI9_PrivateDataEnd
